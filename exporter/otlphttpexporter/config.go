// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package otlphttpexporter

import "encoding/json"
import "fmt"
import confighttp "go.opentelemetry.io/collector/config/confighttp"
import configretry "go.opentelemetry.io/collector/config/configretry"
import exporterhelper "go.opentelemetry.io/collector/exporter/exporterhelper"
import "reflect"

// Configuration parameters for the OTLP HTTP exporter.
type Config struct {
	// Encoding corresponds to the JSON schema field "encoding".
	Encoding ConfigEncoding `mapstructure:"encoding"`

	// LogsEndpoint corresponds to the JSON schema field "logs_endpoint".
	LogsEndpoint string `mapstructure:"logs_endpoint"`

	// MetricsEndpoint corresponds to the JSON schema field "metrics_endpoint".
	MetricsEndpoint string `mapstructure:"metrics_endpoint"`

	// RetryOnFailure corresponds to the JSON schema field "retry_on_failure".
	RetryOnFailure *configretry.RetryOnFailure `mapstructure:"retry_on_failure"`

	// SendingQueue corresponds to the JSON schema field "sending_queue".
	SendingQueue *exporterhelper.SendingQueue `mapstructure:"sending_queue"`

	// TracesEndpoint corresponds to the JSON schema field "traces_endpoint".
	TracesEndpoint string `mapstructure:"traces_endpoint"`

	confighttp.ClientConfig `mapstructure:",squash"`
}

type ConfigEncoding string

const ConfigEncodingJson ConfigEncoding = "json"
const ConfigEncodingProto ConfigEncoding = "proto"

var enumValues_ConfigEncoding = []interface{}{
	"proto",
	"json",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigEncoding) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfigEncoding {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfigEncoding, v)
	}
	*j = ConfigEncoding(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["encoding"]; !ok || v == nil {
		plain.Encoding = "proto"
	}
	if v, ok := raw["logs_endpoint"]; !ok || v == nil {
		plain.LogsEndpoint = ""
	}
	if v, ok := raw["metrics_endpoint"]; !ok || v == nil {
		plain.MetricsEndpoint = ""
	}
	if v, ok := raw["traces_endpoint"]; !ok || v == nil {
		plain.TracesEndpoint = ""
	}
	*j = Config(plain)
	return nil
}

// SetDefaults sets the fields of Config to their defaults.
// Fields which do not have a default value are left untouched.
func (c *Config) SetDefaults() {
	c.Encoding = "proto"
	c.LogsEndpoint = ""
	c.MetricsEndpoint = ""
	c.TracesEndpoint = ""
}
