// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package exporterhelper

import "encoding/json"

type SendingQueue struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `mapstructure:"enabled"`

	// NumWorkers corresponds to the JSON schema field "num_workers".
	NumWorkers *int `mapstructure:"num_workers"`

	// QueueSize corresponds to the JSON schema field "queue_size".
	QueueSize int `mapstructure:"queue_size"`

	// Storage corresponds to the JSON schema field "storage".
	Storage string `mapstructure:"storage"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendingQueue) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain SendingQueue
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["enabled"]; !ok || v == nil {
		plain.Enabled = true
	}
	if v, ok := raw["queue_size"]; !ok || v == nil {
		plain.QueueSize = 1000.0
	}
	if v, ok := raw["storage"]; !ok || v == nil {
		plain.Storage = ""
	}
	*j = SendingQueue(plain)
	return nil
}

// SetDefaults sets the fields of SendingQueue to their defaults.
// Fields which do not have a default value are left untouched.
func (c *SendingQueue) SetDefaults() {
	c.Enabled = true
	c.QueueSize = 1000.0
	c.Storage = ""
}
