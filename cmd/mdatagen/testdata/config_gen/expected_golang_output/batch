// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test_pkg

import "encoding/json"
import "fmt"
import "time"

// Configuration parameters for the batch processor.
type Config struct {
	// MetadataCardinalityLimit corresponds to the JSON schema field
	// "metadata_cardinality_limit".
	MetadataCardinalityLimit int `mapstructure:"metadata_cardinality_limit"`

	// MetadataKeys corresponds to the JSON schema field "metadata_keys".
	MetadataKeys []string `mapstructure:"metadata_keys"`

	// PaulinTest corresponds to the JSON schema field "paulin_test".
	PaulinTest string `mapstructure:"paulin_test"`

	// PaulinTest2 corresponds to the JSON schema field "paulin_test2".
	PaulinTest2 *float64 `mapstructure:"paulin_test2"`

	// PaulinTest3 corresponds to the JSON schema field "paulin_test3".
	PaulinTest3 *bool `mapstructure:"paulin_test3"`

	// SendBatchMaxSize corresponds to the JSON schema field "send_batch_max_size".
	SendBatchMaxSize int `mapstructure:"send_batch_max_size"`

	// SendBatchSize corresponds to the JSON schema field "send_batch_size".
	SendBatchSize int `mapstructure:"send_batch_size"`

	// Timeout corresponds to the JSON schema field "timeout".
	Timeout time.Duration `mapstructure:"timeout"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["metadata_cardinality_limit"]; !ok || v == nil {
		plain.MetadataCardinalityLimit = 1000.0
	}
	if v, ok := raw["paulin_test"]; !ok || v == nil {
		plain.PaulinTest = "test"
	}
	if v, ok := raw["send_batch_max_size"]; !ok || v == nil {
		plain.SendBatchMaxSize = 0.0
	}
	if v, ok := raw["send_batch_size"]; !ok || v == nil {
		plain.SendBatchSize = 8192.0
	}
	if v, ok := raw["timeout"]; !ok || v == nil {
		defaultDuration, err := time.ParseDuration("33.3s")
		if err != nil {
			return fmt.Errorf("failed to parse the \"33.3s\" default value for field timeout:%w }", err)
		}
		plain.Timeout = defaultDuration
	}
	*j = Config(plain)
	return nil
}

// SetDefaults sets the fields of Config to their defaults.
// Fields which do not have a default value are left untouched.
func (c *Config) SetDefaults() {
	c.MetadataCardinalityLimit = 1000.0
	c.PaulinTest = "test"
	c.SendBatchMaxSize = 0.0
	c.SendBatchSize = 8192.0
	c.Timeout = "PT33.3S"
}
