// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package batchprocessor

import "encoding/json"

// Configuration parameters for the batch processor.
type Config struct {
	// MetadataCardinalityLimit corresponds to the JSON schema field
	// "metadata_cardinality_limit".
	MetadataCardinalityLimit int `json:"metadata_cardinality_limit,omitempty" yaml:"metadata_cardinality_limit,omitempty" mapstructure:"metadata_cardinality_limit,omitempty"`

	// MetadataKeys corresponds to the JSON schema field "metadata_keys".
	MetadataKeys []string `json:"metadata_keys,omitempty" yaml:"metadata_keys,omitempty" mapstructure:"metadata_keys,omitempty"`

	// SendBatchMaxSize corresponds to the JSON schema field "send_batch_max_size".
	SendBatchMaxSize int `json:"send_batch_max_size,omitempty" yaml:"send_batch_max_size,omitempty" mapstructure:"send_batch_max_size,omitempty"`

	// SendBatchSize corresponds to the JSON schema field "send_batch_size".
	SendBatchSize int `json:"send_batch_size,omitempty" yaml:"send_batch_size,omitempty" mapstructure:"send_batch_size,omitempty"`

	// Timeout corresponds to the JSON schema field "timeout".
	Timeout string `json:"timeout,omitempty" yaml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["metadata_cardinality_limit"]; !ok || v == nil {
		plain.MetadataCardinalityLimit = 1000.0
	}
	if v, ok := raw["send_batch_max_size"]; !ok || v == nil {
		plain.SendBatchMaxSize = 0.0
	}
	if v, ok := raw["send_batch_size"]; !ok || v == nil {
		plain.SendBatchSize = 8192.0
	}
	if v, ok := raw["timeout"]; !ok || v == nil {
		plain.Timeout = "P200MS"
	}
	*j = Config(plain)
	return nil
}

func (cfg *Config)Validate() error {
	b, err := json.Marshal(cfg)
	if err != nil {
			return err
	}
	var config Config
	if err := json.Unmarshal(b, &config); err != nil {
			return err
	}
	return nil
}