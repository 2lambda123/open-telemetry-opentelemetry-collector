// Code generated by "go.opentelemetry.io/collector/cmd/builder". DO NOT EDIT.

// Program {{ .Distribution.Name }} is an OpenTelemetry Collector binary.
package main

import (
	"log"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/converter/expandconverter"
	{{- range .Providers}}
	{{.Name}} "{{.Import}}"
	{{- end}}
	"go.opentelemetry.io/collector/otelcol"
)

func main() {
	info := component.BuildInfo{
		Command:     "{{ .Distribution.Name }}",
		Description: "{{ .Distribution.Description }}",
		Version:     "{{ .Distribution.Version }}",
	}
	{{if .SupportsConfigProviderSettings -}}
	providers := []confmap.Provider{
		{{- range .Providers}}
		{{.Name}}.NewWithSettings(confmap.ProviderSettings{}),
		{{- end}}
	}
	{{end}}
	set := otelcol.CollectorSettings{
		BuildInfo: info,
		Factories: components,
		{{if .SupportsConfigProviderSettings -}}
		ConfigProviderSettings: otelcol.ConfigProviderSettings{
			ResolverSettings: confmap.ResolverSettings{
				Providers:  makeMapProvidersMap(providers...),
				Converters: []confmap.Converter{
					expandconverter.New(confmap.ConverterSettings{}),
				},
			},
		},
		{{end}}
	}

	if err := run(set); err != nil {
		log.Fatal(err)
	}
}

func runInteractive(params otelcol.CollectorSettings) error {
	cmd := otelcol.NewCommand(params)
	if err := cmd.Execute(); err != nil {
		log.Fatalf("collector server run finished with error: %v", err)
	}

	return nil
}

{{if .SupportsConfigProviderSettings -}}
func makeMapProvidersMap(providers ...confmap.Provider) map[string]confmap.Provider {
	ret := make(map[string]confmap.Provider, len(providers))
	for _, provider := range providers {
		ret[provider.Scheme()] = provider
	}
	return ret
}
{{end}}
