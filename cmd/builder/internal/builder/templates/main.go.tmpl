// Code generated by "go.opentelemetry.io/collector/cmd/builder". DO NOT EDIT.

// Program {{ .Distribution.Name }} is an OpenTelemetry Collector binary.
package main

import (
	"log"

	"go.opentelemetry.io/collector/component"
	{{- if .Distribution.SupportsConfmapFactories}}
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/converter/expandconverter"
	"go.opentelemetry.io/collector/featuregate"
	{{- range .Providers}}
	{{.Name}} "{{.Import}}"
	{{- end}}
	{{- end}}
	"go.opentelemetry.io/collector/otelcol"
)

{{ if .Distribution.SupportsConfmapFactories }}
var useUnifiedEnvVarExpansionRules = featuregate.GlobalRegistry().MustRegister("otelcol.unifyEnvVarExpansion",
	featuregate.StageAlpha,
	featuregate.WithRegisterFromVersion("v0.102.0"),
	featuregate.WithRegisterDescription("`${FOO}` will now be expanded as if it was `${env:FOO}` and no longer expands $ENV syntax. See https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/rfcs/env-vars.md for more details."))
{{- end}}

func main() {
	info := component.BuildInfo{
		Command:     "{{ .Distribution.Name }}",
		Description: "{{ .Distribution.Description }}",
		Version:     "{{ .Distribution.Version }}",
	}

	set := otelcol.CollectorSettings{
		BuildInfo: info,
		Factories: components,
		{{- if .Distribution.SupportsConfmapFactories}}
		ConfigProviderSettings: otelcol.ConfigProviderSettings{
			ResolverSettings: confmap.ResolverSettings{
				ProviderFactories: []confmap.ProviderFactory{
					{{- range .Providers}}
					{{.Name}}.NewFactory(),
					{{- end}}
				},
				{{- if .ConfResolver.DefaultURIScheme }}
				DefaultScheme: "{{ .ConfResolver.DefaultURIScheme }}",
				{{- end }}
			},
		},
		{{- end}}
	}

    {{ if .Distribution.SupportsConfmapFactories }}
    if useUnifiedEnvVarExpansionRules.IsEnabled() && set.ConfigProviderSettings.ResolverSettings.DefaultScheme == "" {
        set.ConfigProviderSettings.ResolverSettings.DefaultScheme = "env"
    } else {
        set.ConfigProviderSettings.ResolverSettings.ConverterFactories = []confmap.ConverterFactory{
            expandconverter.NewFactory(),
        }
    }
    {{- end}}

	if err := run(set); err != nil {
		log.Fatal(err)
	}
}

func runInteractive(params otelcol.CollectorSettings) error {
	cmd := otelcol.NewCommand(params)
	if err := cmd.Execute(); err != nil {
		log.Fatalf("collector server run finished with error: %v", err)
	}

	return nil
}
