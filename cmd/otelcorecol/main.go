// Code generated by "go.opentelemetry.io/collector/cmd/builder". DO NOT EDIT.

// Program otelcontribcol is an extension to the OpenTelemetry Collector
// that includes additional components, some vendor-specific, contributed
// from the wider community.
package main

import (
	"log"

	"github.com/spf13/cobra"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/service"
	"go.opentelemetry.io/collector/service/featuregate"
)

func main() {
	info := component.BuildInfo{
		Command:     "otelcorecol",
		Description: "Local OpenTelemetry Collector binary, testing only.",
		Version:     "0.48.0-dev",
	}

	if err := run(service.CollectorSettings{BuildInfo: info}); err != nil {
		log.Fatalf("collector server run finished with error: %v", err)
	}
}

func runInteractive(params service.CollectorSettings) error {
	return newCommand(params).Execute()
}

func newCommand(params service.CollectorSettings) *cobra.Command {
	cmd := &cobra.Command{
		Use:          params.BuildInfo.Command,
		Version:      params.BuildInfo.Version,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			featuregate.Apply(featuregate.GetFlags())
			if params.ConfigProvider == nil {
				params.ConfigProvider = service.MustNewDefaultConfigProvider(service.GetConfigFlag(), service.GetSetFlag())
			}
			var err error
			params.Factories, err = components()
			if err != nil {
				return err
			}
			col, err := service.New(params)
			if err != nil {
				return err
			}
			return col.Run(cmd.Context())
		},
	}
	cmd.Flags().AddGoFlagSet(service.Flags())
	return cmd
}
