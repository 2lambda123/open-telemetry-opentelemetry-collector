// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"sort"

	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// NumberDataPointSlice logically represents a slice of NumberDataPoint.
//
// This is a reference type. If passed by value and callee modifies it, the
// caller will see the modification.
//
// Must use NewNumberDataPointSlice function to create new instances.
// Important: zero-initialized instance is not valid for use.
type NumberDataPointSlice struct {
	parent internal.SliceParent[*[]*otlpmetrics.NumberDataPoint]
}
type stubNumberDataPointSliceParent struct {
	orig *[]*otlpmetrics.NumberDataPoint
}

func (s stubNumberDataPointSliceParent) GetChildOrig() *[]*otlpmetrics.NumberDataPoint {
	return s.orig
}

func (s stubNumberDataPointSliceParent) EnsureMutability() {}

func (s stubNumberDataPointSliceParent) GetState() *internal.State {
	state := internal.StateExclusive
	return &state
}

func newNumberDataPointSliceFromOrig(orig *[]*otlpmetrics.NumberDataPoint) NumberDataPointSlice {
	return NumberDataPointSlice{parent: stubNumberDataPointSliceParent{orig: orig}}
}

func newNumberDataPointSliceFromParent(parent internal.SliceParent[*[]*otlpmetrics.NumberDataPoint]) NumberDataPointSlice {
	return NumberDataPointSlice{parent: parent}
}

func (es NumberDataPointSlice) getOrig() *[]*otlpmetrics.NumberDataPoint {
	return es.parent.GetChildOrig()
}

func (es NumberDataPointSlice) ensureMutability() {
	es.parent.EnsureMutability()
}

func (es NumberDataPointSlice) getState() *internal.State {
	return es.parent.GetState()
}

func (es NumberDataPointSlice) refreshElementOrigState(i int) (*otlpmetrics.NumberDataPoint, *internal.State) {
	return (*es.getOrig())[i], es.getState()
}

// NewNumberDataPointSlice creates a NumberDataPointSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewNumberDataPointSlice() NumberDataPointSlice {
	orig := []*otlpmetrics.NumberDataPoint(nil)
	return newNumberDataPointSliceFromOrig(&orig)
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewNumberDataPointSlice()".
func (es NumberDataPointSlice) Len() int {
	return len(*es.getOrig())
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es NumberDataPointSlice) At(i int) NumberDataPoint {
	return newNumberDataPoint((*es.getOrig())[i], es, i)
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new NumberDataPointSlice can be initialized:
//
//	es := NewNumberDataPointSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es NumberDataPointSlice) EnsureCapacity(newCap int) {
	es.ensureMutability()
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]*otlpmetrics.NumberDataPoint, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty NumberDataPoint.
// It returns the newly added NumberDataPoint.
func (es NumberDataPointSlice) AppendEmpty() NumberDataPoint {
	es.ensureMutability()
	*es.getOrig() = append(*es.getOrig(), &otlpmetrics.NumberDataPoint{})
	return es.At(es.Len() - 1)
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es NumberDataPointSlice) MoveAndAppendTo(dest NumberDataPointSlice) {
	es.ensureMutability()
	dest.ensureMutability()
	if *dest.getOrig() == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.getOrig() = *es.getOrig()
	} else {
		*dest.getOrig() = append(*dest.getOrig(), *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es NumberDataPointSlice) RemoveIf(f func(NumberDataPoint) bool) {
	es.ensureMutability()
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	// TODO: Prevent memory leak by erasing truncated values.
	*es.getOrig() = (*es.getOrig())[:newLen]
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es NumberDataPointSlice) CopyTo(dest NumberDataPointSlice) {
	dest.ensureMutability()
	srcLen := es.Len()
	destCap := cap(*dest.getOrig())
	exclState := internal.StateExclusive
	if srcLen <= destCap {
		(*dest.getOrig()) = (*dest.getOrig())[:srcLen:destCap]
		for i := range *es.getOrig() {
			srcNumberDataPoint := NumberDataPoint{&pNumberDataPoint{orig: (*es.getOrig())[i], state: &exclState}}
			destNumberDataPoint := NumberDataPoint{&pNumberDataPoint{orig: (*dest.getOrig())[i],
				state: &exclState}}
			srcNumberDataPoint.CopyTo(destNumberDataPoint)
		}
		return
	}
	origs := make([]otlpmetrics.NumberDataPoint, srcLen)
	wrappers := make([]*otlpmetrics.NumberDataPoint, srcLen)
	for i := range *es.getOrig() {
		wrappers[i] = &origs[i]
		srcNumberDataPoint := NumberDataPoint{&pNumberDataPoint{orig: (*es.getOrig())[i], state: &exclState}}
		destNumberDataPoint := NumberDataPoint{&pNumberDataPoint{orig: wrappers[i], state: &exclState}}
		srcNumberDataPoint.CopyTo(destNumberDataPoint)
	}
	*dest.getOrig() = wrappers
}

// Sort sorts the NumberDataPoint elements within NumberDataPointSlice given the
// provided less function so that two instances of NumberDataPointSlice
// can be compared.
func (es NumberDataPointSlice) Sort(less func(a, b NumberDataPoint) bool) {
	es.ensureMutability()
	sort.SliceStable(*es.getOrig(), func(i, j int) bool { return less(es.At(i), es.At(j)) })
}
