// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"sort"

	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// SummaryDataPointValueAtQuantileSlice logically represents a slice of SummaryDataPointValueAtQuantile.
type SummaryDataPointValueAtQuantileSlice interface {
	commonSummaryDataPointValueAtQuantileSlice
	At(ix int) SummaryDataPointValueAtQuantile
}

type MutableSummaryDataPointValueAtQuantileSlice interface {
	commonSummaryDataPointValueAtQuantileSlice
	At(ix int) MutableSummaryDataPointValueAtQuantile
	EnsureCapacity(newCap int)
	AppendEmpty() MutableSummaryDataPointValueAtQuantile
	Sort(less func(a, b MutableSummaryDataPointValueAtQuantile) bool)
}

type commonSummaryDataPointValueAtQuantileSlice interface {
	Len() int
	CopyTo(dest MutableSummaryDataPointValueAtQuantileSlice)
	getOrig() *[]*otlpmetrics.SummaryDataPoint_ValueAtQuantile
}

type immutableSummaryDataPointValueAtQuantileSlice struct {
	orig *[]*otlpmetrics.SummaryDataPoint_ValueAtQuantile
}

type mutableSummaryDataPointValueAtQuantileSlice struct {
	immutableSummaryDataPointValueAtQuantileSlice
}

func (es immutableSummaryDataPointValueAtQuantileSlice) getOrig() *[]*otlpmetrics.SummaryDataPoint_ValueAtQuantile {
	return es.orig
}

func newImmutableSummaryDataPointValueAtQuantileSlice(orig *[]*otlpmetrics.SummaryDataPoint_ValueAtQuantile) immutableSummaryDataPointValueAtQuantileSlice {
	return immutableSummaryDataPointValueAtQuantileSlice{orig}
}

func newMutableSummaryDataPointValueAtQuantileSlice(orig *[]*otlpmetrics.SummaryDataPoint_ValueAtQuantile) mutableSummaryDataPointValueAtQuantileSlice {
	return mutableSummaryDataPointValueAtQuantileSlice{immutableSummaryDataPointValueAtQuantileSlice{orig}}
}

// NewSummaryDataPointValueAtQuantileSlice creates a SummaryDataPointValueAtQuantileSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewSummaryDataPointValueAtQuantileSlice() MutableSummaryDataPointValueAtQuantileSlice {
	orig := []*otlpmetrics.SummaryDataPoint_ValueAtQuantile(nil)
	return newMutableSummaryDataPointValueAtQuantileSlice(&orig)
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewSummaryDataPointValueAtQuantileSlice()".
func (es immutableSummaryDataPointValueAtQuantileSlice) Len() int {
	return len(*es.getOrig())
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es immutableSummaryDataPointValueAtQuantileSlice) At(ix int) SummaryDataPointValueAtQuantile {
	return newImmutableSummaryDataPointValueAtQuantile((*es.getOrig())[ix])
}

func (es mutableSummaryDataPointValueAtQuantileSlice) At(ix int) MutableSummaryDataPointValueAtQuantile {
	return newMutableSummaryDataPointValueAtQuantile((*es.getOrig())[ix])
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es immutableSummaryDataPointValueAtQuantileSlice) CopyTo(dest MutableSummaryDataPointValueAtQuantileSlice) {
	srcLen := es.Len()
	destCap := cap(*dest.getOrig())
	if srcLen <= destCap {
		(*dest.getOrig()) = (*dest.getOrig())[:srcLen:destCap]
		for i := range *es.getOrig() {
			newImmutableSummaryDataPointValueAtQuantile((*es.getOrig())[i]).CopyTo(newMutableSummaryDataPointValueAtQuantile((*dest.getOrig())[i]))
		}
		return
	}
	origs := make([]otlpmetrics.SummaryDataPoint_ValueAtQuantile, srcLen)
	wrappers := make([]*otlpmetrics.SummaryDataPoint_ValueAtQuantile, srcLen)
	for i := range *es.getOrig() {
		wrappers[i] = &origs[i]
		newImmutableSummaryDataPointValueAtQuantile((*es.getOrig())[i]).CopyTo(newMutableSummaryDataPointValueAtQuantile(wrappers[i]))
	}
	*dest.getOrig() = wrappers
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new SummaryDataPointValueAtQuantileSlice can be initialized:
//
//	es := NewSummaryDataPointValueAtQuantileSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es mutableSummaryDataPointValueAtQuantileSlice) EnsureCapacity(newCap int) {
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]*otlpmetrics.SummaryDataPoint_ValueAtQuantile, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty SummaryDataPointValueAtQuantile.
// It returns the newly added SummaryDataPointValueAtQuantile.
func (es mutableSummaryDataPointValueAtQuantileSlice) AppendEmpty() MutableSummaryDataPointValueAtQuantile {
	*es.getOrig() = append(*es.getOrig(), &otlpmetrics.SummaryDataPoint_ValueAtQuantile{})
	return es.At(es.Len() - 1)
}

// Sort sorts the SummaryDataPointValueAtQuantile elements within SummaryDataPointValueAtQuantileSlice given the
// provided less function so that two instances of SummaryDataPointValueAtQuantileSlice
// can be compared.
func (es mutableSummaryDataPointValueAtQuantileSlice) Sort(less func(a, b MutableSummaryDataPointValueAtQuantile) bool) {
	sort.SliceStable(*es.getOrig(), func(i, j int) bool { return less(es.At(i), es.At(j)) })
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es mutableSummaryDataPointValueAtQuantileSlice) MoveAndAppendTo(dest mutableSummaryDataPointValueAtQuantileSlice) {
	if *dest.getOrig() == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.getOrig() = *es.getOrig()
	} else {
		*dest.getOrig() = append(*dest.getOrig(), *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es mutableSummaryDataPointValueAtQuantileSlice) RemoveIf(f func(MutableSummaryDataPointValueAtQuantile) bool) {
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	// TODO: Prevent memory leak by erasing truncated values.
	*es.orig = (*es.orig)[:newLen]
}

func generateTestSummaryDataPointValueAtQuantileSlice() MutableSummaryDataPointValueAtQuantileSlice {
	tv := NewSummaryDataPointValueAtQuantileSlice()
	fillTestSummaryDataPointValueAtQuantileSlice(tv)
	return tv
}

func fillTestSummaryDataPointValueAtQuantileSlice(tv MutableSummaryDataPointValueAtQuantileSlice) {
	*tv.orig = make([]*otlpmetrics.SummaryDataPoint_ValueAtQuantile, 7)
	for i := 0; i < 7; i++ {
		(*tv.orig)[i] = &otlpmetrics.SummaryDataPoint_ValueAtQuantile{}
		fillTestSummaryDataPointValueAtQuantile(newSummaryDataPointValueAtQuantile((*tv.orig)[i]))
	}
}
