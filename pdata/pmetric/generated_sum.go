// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Sum represents the type of a numeric metric that is calculated as a sum of all reported measurements over a time interval.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSum function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Sum struct {
	commonSum
}

type MutableSum struct {
	commonSum
	preventConversion struct{} // nolint:unused
}

type commonSum struct {
	orig *otlpmetrics.Sum
}

func newSumFromOrig(orig *otlpmetrics.Sum) Sum {
	return Sum{commonSum{orig}}
}

func newMutableSumFromOrig(orig *otlpmetrics.Sum) MutableSum {
	return MutableSum{commonSum: commonSum{orig}}
}

// NewMutableSum creates a new empty Sum.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSum() MutableSum {
	return newMutableSumFromOrig(&otlpmetrics.Sum{})
}

// nolint:unused
func (ms Sum) asMutable() MutableSum {
	return MutableSum{commonSum: commonSum{orig: ms.orig}}
}

func (ms MutableSum) AsImmutable() Sum {
	return Sum{commonSum{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSum) MoveTo(dest MutableSum) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.Sum{}
}

// AggregationTemporality returns the aggregationtemporality associated with this Sum.
func (ms commonSum) AggregationTemporality() AggregationTemporality {
	return AggregationTemporality(ms.orig.AggregationTemporality)
}

// SetAggregationTemporality replaces the aggregationtemporality associated with this Sum.
func (ms MutableSum) SetAggregationTemporality(v AggregationTemporality) {
	ms.orig.AggregationTemporality = otlpmetrics.AggregationTemporality(v)
}

// IsMonotonic returns the ismonotonic associated with this Sum.
func (ms commonSum) IsMonotonic() bool {
	return ms.orig.IsMonotonic
}

// SetIsMonotonic replaces the ismonotonic associated with this Sum.
func (ms MutableSum) SetIsMonotonic(v bool) {
	ms.orig.IsMonotonic = v
}

// DataPoints returns the DataPoints associated with this Sum.
func (ms Sum) DataPoints() NumberDataPointSlice {
	return newNumberDataPointSliceFromOrig(&ms.orig.DataPoints)
}

func (ms MutableSum) DataPoints() MutableNumberDataPointSlice {
	return newMutableNumberDataPointSliceFromOrig(&ms.orig.DataPoints)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSum) CopyTo(dest MutableSum) {
	dest.SetAggregationTemporality(ms.AggregationTemporality())
	dest.SetIsMonotonic(ms.IsMonotonic())
	Sum{ms}.DataPoints().CopyTo(dest.DataPoints())
}

func generateTestSum() MutableSum {
	tv := NewMutableSum()
	fillTestSum(tv)
	return tv
}

func fillTestSum(tv MutableSum) {
	tv.orig.AggregationTemporality = otlpmetrics.AggregationTemporality(1)
	tv.orig.IsMonotonic = true
	fillTestNumberDataPointSlice(newMutableNumberDataPointSliceFromOrig(&tv.orig.DataPoints))
}
