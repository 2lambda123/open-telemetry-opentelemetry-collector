// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Sum represents the type of a numeric metric that is calculated as a sum of all reported measurements over a time interval.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewSum function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Sum struct {
	*pSum
}

type pSum struct {
	orig   *otlpmetrics.Sum
	state  *internal.State
	parent Metric
}

func (ms Sum) getOrig() *otlpmetrics.Sum {
	if *ms.state == internal.StateDirty {
		ms.orig, ms.state = ms.parent.refreshSumOrigState()
	}
	return ms.orig
}

func (ms Sum) ensureMutability() {
	if *ms.state == internal.StateShared {
		ms.parent.ensureMutability()
	}
}

func (ms Sum) getState() *internal.State {
	return ms.state
}

type wrappedSumDataPoints struct {
	Sum
}

func (es wrappedSumDataPoints) GetChildOrig() *[]*otlpmetrics.NumberDataPoint {
	return &es.getOrig().DataPoints
}

func (es wrappedSumDataPoints) EnsureMutability() {
	es.ensureMutability()
}

func (es wrappedSumDataPoints) GetState() *internal.State {
	return es.getState()
}

func newSum(orig *otlpmetrics.Sum, parent Metric) Sum {
	return Sum{&pSum{
		orig:   orig,
		state:  parent.getState(),
		parent: parent,
	}}
}

// NewSum creates a new empty Sum.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewSum() Sum {
	state := internal.StateExclusive
	return Sum{&pSum{orig: &otlpmetrics.Sum{}, state: &state}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms Sum) MoveTo(dest Sum) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.Sum{}
}

// AggregationTemporality returns the aggregationtemporality associated with this Sum.
func (ms Sum) AggregationTemporality() AggregationTemporality {
	return AggregationTemporality(ms.getOrig().AggregationTemporality)
}

// SetAggregationTemporality replaces the aggregationtemporality associated with this Sum.
func (ms Sum) SetAggregationTemporality(v AggregationTemporality) {
	ms.ensureMutability()
	ms.getOrig().AggregationTemporality = otlpmetrics.AggregationTemporality(v)
}

// IsMonotonic returns the ismonotonic associated with this Sum.
func (ms Sum) IsMonotonic() bool {
	return ms.getOrig().IsMonotonic
}

// SetIsMonotonic replaces the ismonotonic associated with this Sum.
func (ms Sum) SetIsMonotonic(v bool) {
	ms.ensureMutability()
	ms.getOrig().IsMonotonic = v
}

// DataPoints returns the <no value> associated with this Sum.
func (ms Sum) DataPoints() NumberDataPointSlice {
	return NumberDataPointSlice(newNumberDataPointSliceFromParent(wrappedSumDataPoints{Sum: ms}))
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms Sum) CopyTo(dest Sum) {
	dest.ensureMutability()
	dest.SetAggregationTemporality(ms.AggregationTemporality())
	dest.SetIsMonotonic(ms.IsMonotonic())
	ms.DataPoints().CopyTo(dest.DataPoints())
}
