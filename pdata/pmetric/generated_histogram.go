// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Histogram represents the type of a metric that is calculated by aggregating as a Histogram of all reported measurements over a time interval.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewHistogram function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Histogram struct {
	parent Metric
}

func (ms Histogram) getOrig() *otlpmetrics.Histogram {
	return ms.parent.getHistogramOrig()
}

func (ms Histogram) ensureMutability() {
	ms.parent.ensureMutability()
}

func (ms Histogram) getDataPointsOrig() *[]*otlpmetrics.HistogramDataPoint {
	return &ms.getOrig().DataPoints
}

func newHistogramFromDataPointsOrig(childOrig *[]*otlpmetrics.HistogramDataPoint) Histogram {
	return newHistogramFromOrig(&otlpmetrics.Histogram{
		DataPoints: *childOrig,
	})
}

func newHistogramFromOrig(orig *otlpmetrics.Histogram) Histogram {
	return Histogram{parent: newMetricFromHistogramOrig(orig)}
}

func newHistogramFromParent(parent Metric) Histogram {
	return Histogram{parent: parent}
}

// NewHistogram creates a new empty Histogram.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewHistogram() Histogram {
	return newHistogramFromOrig(&otlpmetrics.Histogram{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms Histogram) MoveTo(dest Histogram) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.Histogram{}
}

// AggregationTemporality returns the aggregationtemporality associated with this Histogram.
func (ms Histogram) AggregationTemporality() AggregationTemporality {
	return AggregationTemporality(ms.getOrig().AggregationTemporality)
}

// SetAggregationTemporality replaces the aggregationtemporality associated with this Histogram.
func (ms Histogram) SetAggregationTemporality(v AggregationTemporality) {
	ms.ensureMutability()
	ms.getOrig().AggregationTemporality = otlpmetrics.AggregationTemporality(v)
}

// DataPoints returns the <no value> associated with this Histogram.
func (ms Histogram) DataPoints() HistogramDataPointSlice {
	return newHistogramDataPointSliceFromParent(ms)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms Histogram) CopyTo(dest Histogram) {
	dest.ensureMutability()
	dest.SetAggregationTemporality(ms.AggregationTemporality())
	ms.DataPoints().CopyTo(dest.DataPoints())
}
