// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Histogram represents the type of a metric that is calculated by aggregating as a Histogram of all reported measurements over a time interval.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableHistogram function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Histogram struct {
	commonHistogram
}

type MutableHistogram struct {
	commonHistogram
	preventConversion struct{} // nolint:unused
}

type commonHistogram struct {
	orig *otlpmetrics.Histogram
}

func newHistogramFromOrig(orig *otlpmetrics.Histogram) Histogram {
	return Histogram{commonHistogram{orig}}
}

func newMutableHistogramFromOrig(orig *otlpmetrics.Histogram) MutableHistogram {
	return MutableHistogram{commonHistogram: commonHistogram{orig}}
}

// NewMutableHistogram creates a new empty Histogram.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableHistogram() MutableHistogram {
	return newMutableHistogramFromOrig(&otlpmetrics.Histogram{})
}

// nolint:unused
func (ms Histogram) asMutable() MutableHistogram {
	return MutableHistogram{commonHistogram: commonHistogram{orig: ms.orig}}
}

func (ms MutableHistogram) AsImmutable() Histogram {
	return Histogram{commonHistogram{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableHistogram) MoveTo(dest MutableHistogram) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.Histogram{}
}

// AggregationTemporality returns the aggregationtemporality associated with this Histogram.
func (ms commonHistogram) AggregationTemporality() AggregationTemporality {
	return AggregationTemporality(ms.orig.AggregationTemporality)
}

// SetAggregationTemporality replaces the aggregationtemporality associated with this Histogram.
func (ms MutableHistogram) SetAggregationTemporality(v AggregationTemporality) {
	ms.orig.AggregationTemporality = otlpmetrics.AggregationTemporality(v)
}

// DataPoints returns the DataPoints associated with this Histogram.
func (ms Histogram) DataPoints() HistogramDataPointSlice {
	return newHistogramDataPointSliceFromOrig(&ms.orig.DataPoints)
}

func (ms MutableHistogram) DataPoints() MutableHistogramDataPointSlice {
	return newMutableHistogramDataPointSliceFromOrig(&ms.orig.DataPoints)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonHistogram) CopyTo(dest MutableHistogram) {
	dest.SetAggregationTemporality(ms.AggregationTemporality())
	Histogram{ms}.DataPoints().CopyTo(dest.DataPoints())
}

func generateTestHistogram() MutableHistogram {
	tv := NewMutableHistogram()
	fillTestHistogram(tv)
	return tv
}

func fillTestHistogram(tv MutableHistogram) {
	tv.orig.AggregationTemporality = otlpmetrics.AggregationTemporality(1)
	fillTestHistogramDataPointSlice(newMutableHistogramDataPointSliceFromOrig(&tv.orig.DataPoints))
}
