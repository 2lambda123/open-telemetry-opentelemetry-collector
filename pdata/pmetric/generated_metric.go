// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Metric represents one metric as a collection of datapoints.
// See Metric definition in OTLP: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/metrics/v1/metrics.proto
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableMetric function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Metric struct {
	commonMetric
}

type MutableMetric struct {
	commonMetric
	preventConversion struct{} // nolint:unused
}

type commonMetric struct {
	orig *otlpmetrics.Metric
}

func newMetricFromOrig(orig *otlpmetrics.Metric) Metric {
	return Metric{commonMetric{orig}}
}

func newMutableMetricFromOrig(orig *otlpmetrics.Metric) MutableMetric {
	return MutableMetric{commonMetric: commonMetric{orig}}
}

// NewMutableMetric creates a new empty Metric.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableMetric() MutableMetric {
	return newMutableMetricFromOrig(&otlpmetrics.Metric{})
}

// nolint:unused
func (ms Metric) asMutable() MutableMetric {
	return MutableMetric{commonMetric: commonMetric{orig: ms.orig}}
}

func (ms MutableMetric) AsImmutable() Metric {
	return Metric{commonMetric{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableMetric) MoveTo(dest MutableMetric) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.Metric{}
}

// Name returns the name associated with this Metric.
func (ms commonMetric) Name() string {
	return ms.orig.Name
}

// SetName replaces the name associated with this Metric.
func (ms MutableMetric) SetName(v string) {
	ms.orig.Name = v
}

// Description returns the description associated with this Metric.
func (ms commonMetric) Description() string {
	return ms.orig.Description
}

// SetDescription replaces the description associated with this Metric.
func (ms MutableMetric) SetDescription(v string) {
	ms.orig.Description = v
}

// Unit returns the unit associated with this Metric.
func (ms commonMetric) Unit() string {
	return ms.orig.Unit
}

// SetUnit replaces the unit associated with this Metric.
func (ms MutableMetric) SetUnit(v string) {
	ms.orig.Unit = v
}

// Type returns the type of the data for this Metric.
// Calling this function on zero-initialized Metric will cause a panic.
func (ms commonMetric) Type() MetricType {
	switch ms.orig.Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		return MetricTypeGauge
	case *otlpmetrics.Metric_Sum:
		return MetricTypeSum
	case *otlpmetrics.Metric_Histogram:
		return MetricTypeHistogram
	case *otlpmetrics.Metric_ExponentialHistogram:
		return MetricTypeExponentialHistogram
	case *otlpmetrics.Metric_Summary:
		return MetricTypeSummary
	}
	return MetricTypeEmpty
}

// Gauge returns the gauge associated with this Metric.
//
// Calling this function when Type() != MetricTypeGauge returns an invalid
// zero-initialized instance of Gauge. Note that using such Gauge instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Gauge() Gauge {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Gauge)
	if !ok {
		return Gauge{}
	}
	return newGaugeFromOrig(v.Gauge)
}

func (ms MutableMetric) Gauge() MutableGauge {
	return ms.AsImmutable().Gauge().asMutable()
}

// SetEmptyGauge sets an empty gauge to this Metric.
//
// After this, Type() function will return MetricTypeGauge".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms MutableMetric) SetEmptyGauge() MutableGauge {
	val := &otlpmetrics.Gauge{}
	ms.orig.Data = &otlpmetrics.Metric_Gauge{Gauge: val}
	return newMutableGaugeFromOrig(val)
}

// Sum returns the sum associated with this Metric.
//
// Calling this function when Type() != MetricTypeSum returns an invalid
// zero-initialized instance of Sum. Note that using such Sum instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Sum() Sum {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Sum)
	if !ok {
		return Sum{}
	}
	return newSumFromOrig(v.Sum)
}

func (ms MutableMetric) Sum() MutableSum {
	return ms.AsImmutable().Sum().asMutable()
}

// SetEmptySum sets an empty sum to this Metric.
//
// After this, Type() function will return MetricTypeSum".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms MutableMetric) SetEmptySum() MutableSum {
	val := &otlpmetrics.Sum{}
	ms.orig.Data = &otlpmetrics.Metric_Sum{Sum: val}
	return newMutableSumFromOrig(val)
}

// Histogram returns the histogram associated with this Metric.
//
// Calling this function when Type() != MetricTypeHistogram returns an invalid
// zero-initialized instance of Histogram. Note that using such Histogram instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Histogram() Histogram {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Histogram)
	if !ok {
		return Histogram{}
	}
	return newHistogramFromOrig(v.Histogram)
}

func (ms MutableMetric) Histogram() MutableHistogram {
	return ms.AsImmutable().Histogram().asMutable()
}

// SetEmptyHistogram sets an empty histogram to this Metric.
//
// After this, Type() function will return MetricTypeHistogram".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms MutableMetric) SetEmptyHistogram() MutableHistogram {
	val := &otlpmetrics.Histogram{}
	ms.orig.Data = &otlpmetrics.Metric_Histogram{Histogram: val}
	return newMutableHistogramFromOrig(val)
}

// ExponentialHistogram returns the exponentialhistogram associated with this Metric.
//
// Calling this function when Type() != MetricTypeExponentialHistogram returns an invalid
// zero-initialized instance of ExponentialHistogram. Note that using such ExponentialHistogram instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) ExponentialHistogram() ExponentialHistogram {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_ExponentialHistogram)
	if !ok {
		return ExponentialHistogram{}
	}
	return newExponentialHistogramFromOrig(v.ExponentialHistogram)
}

func (ms MutableMetric) ExponentialHistogram() MutableExponentialHistogram {
	return ms.AsImmutable().ExponentialHistogram().asMutable()
}

// SetEmptyExponentialHistogram sets an empty exponentialhistogram to this Metric.
//
// After this, Type() function will return MetricTypeExponentialHistogram".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms MutableMetric) SetEmptyExponentialHistogram() MutableExponentialHistogram {
	val := &otlpmetrics.ExponentialHistogram{}
	ms.orig.Data = &otlpmetrics.Metric_ExponentialHistogram{ExponentialHistogram: val}
	return newMutableExponentialHistogramFromOrig(val)
}

// Summary returns the summary associated with this Metric.
//
// Calling this function when Type() != MetricTypeSummary returns an invalid
// zero-initialized instance of Summary. Note that using such Summary instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Summary() Summary {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Summary)
	if !ok {
		return Summary{}
	}
	return newSummaryFromOrig(v.Summary)
}

func (ms MutableMetric) Summary() MutableSummary {
	return ms.AsImmutable().Summary().asMutable()
}

// SetEmptySummary sets an empty summary to this Metric.
//
// After this, Type() function will return MetricTypeSummary".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms MutableMetric) SetEmptySummary() MutableSummary {
	val := &otlpmetrics.Summary{}
	ms.orig.Data = &otlpmetrics.Metric_Summary{Summary: val}
	return newMutableSummaryFromOrig(val)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonMetric) CopyTo(dest MutableMetric) {
	dest.SetName(ms.Name())
	dest.SetDescription(ms.Description())
	dest.SetUnit(ms.Unit())
	switch ms.Type() {
	case MetricTypeGauge:
		Metric{ms}.Gauge().CopyTo(dest.SetEmptyGauge())
	case MetricTypeSum:
		Metric{ms}.Sum().CopyTo(dest.SetEmptySum())
	case MetricTypeHistogram:
		Metric{ms}.Histogram().CopyTo(dest.SetEmptyHistogram())
	case MetricTypeExponentialHistogram:
		Metric{ms}.ExponentialHistogram().CopyTo(dest.SetEmptyExponentialHistogram())
	case MetricTypeSummary:
		Metric{ms}.Summary().CopyTo(dest.SetEmptySummary())
	}

}

func generateTestMetric() MutableMetric {
	tv := NewMutableMetric()
	fillTestMetric(tv)
	return tv
}

func fillTestMetric(tv MutableMetric) {
	tv.orig.Name = "test_name"
	tv.orig.Description = "test_description"
	tv.orig.Unit = "1"
	tv.orig.Data = &otlpmetrics.Metric_Sum{Sum: &otlpmetrics.Sum{}}
	fillTestSum(tv.Sum())
}
