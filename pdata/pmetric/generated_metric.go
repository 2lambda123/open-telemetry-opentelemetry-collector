// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Metric represents one metric as a collection of datapoints.
// See Metric definition in OTLP: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/metrics/v1/metrics.proto
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMetric function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Metric struct {
	parent MetricSlice
	idx    int
}

func (ms Metric) getOrig() *otlpmetrics.Metric {
	return ms.parent.getChildOrig(ms.idx)
}

func (ms Metric) ensureMutability() {
	ms.parent.ensureMutability()
}

func (es Metric) getGaugeOrig() *otlpmetrics.Gauge {
	return es.getOrig().GetData().(*otlpmetrics.Metric_Gauge).Gauge
}

func newMetricFromGaugeOrig(childOrig *otlpmetrics.Gauge) Metric {
	return newMetricFromOrig(&otlpmetrics.Metric{
		Data: &otlpmetrics.Metric_Gauge{
			Gauge: childOrig,
		},
	})
}

func (es Metric) getSumOrig() *otlpmetrics.Sum {
	return es.getOrig().GetData().(*otlpmetrics.Metric_Sum).Sum
}

func newMetricFromSumOrig(childOrig *otlpmetrics.Sum) Metric {
	return newMetricFromOrig(&otlpmetrics.Metric{
		Data: &otlpmetrics.Metric_Sum{
			Sum: childOrig,
		},
	})
}

func (es Metric) getHistogramOrig() *otlpmetrics.Histogram {
	return es.getOrig().GetData().(*otlpmetrics.Metric_Histogram).Histogram
}

func newMetricFromHistogramOrig(childOrig *otlpmetrics.Histogram) Metric {
	return newMetricFromOrig(&otlpmetrics.Metric{
		Data: &otlpmetrics.Metric_Histogram{
			Histogram: childOrig,
		},
	})
}

func (es Metric) getExponentialHistogramOrig() *otlpmetrics.ExponentialHistogram {
	return es.getOrig().GetData().(*otlpmetrics.Metric_ExponentialHistogram).ExponentialHistogram
}

func newMetricFromExponentialHistogramOrig(childOrig *otlpmetrics.ExponentialHistogram) Metric {
	return newMetricFromOrig(&otlpmetrics.Metric{
		Data: &otlpmetrics.Metric_ExponentialHistogram{
			ExponentialHistogram: childOrig,
		},
	})
}

func (es Metric) getSummaryOrig() *otlpmetrics.Summary {
	return es.getOrig().GetData().(*otlpmetrics.Metric_Summary).Summary
}

func newMetricFromSummaryOrig(childOrig *otlpmetrics.Summary) Metric {
	return newMetricFromOrig(&otlpmetrics.Metric{
		Data: &otlpmetrics.Metric_Summary{
			Summary: childOrig,
		},
	})
}

func newMetricFromOrig(orig *otlpmetrics.Metric) Metric {
	return Metric{parent: newMetricSliceFromElementOrig(orig)}
}

func newMetricFromParent(parent MetricSlice, idx int) Metric {
	return Metric{parent: parent, idx: idx}
}

// NewMetric creates a new empty Metric.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMetric() Metric {
	return newMetricFromOrig(&otlpmetrics.Metric{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms Metric) MoveTo(dest Metric) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.Metric{}
}

// Name returns the name associated with this Metric.
func (ms Metric) Name() string {
	return ms.getOrig().Name
}

// SetName replaces the name associated with this Metric.
func (ms Metric) SetName(v string) {
	ms.ensureMutability()
	ms.getOrig().Name = v
}

// Description returns the description associated with this Metric.
func (ms Metric) Description() string {
	return ms.getOrig().Description
}

// SetDescription replaces the description associated with this Metric.
func (ms Metric) SetDescription(v string) {
	ms.ensureMutability()
	ms.getOrig().Description = v
}

// Unit returns the unit associated with this Metric.
func (ms Metric) Unit() string {
	return ms.getOrig().Unit
}

// SetUnit replaces the unit associated with this Metric.
func (ms Metric) SetUnit(v string) {
	ms.ensureMutability()
	ms.getOrig().Unit = v
}

// Type returns the type of the data for this Metric.
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Type() MetricType {
	switch ms.getOrig().Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		return MetricTypeGauge
	case *otlpmetrics.Metric_Sum:
		return MetricTypeSum
	case *otlpmetrics.Metric_Histogram:
		return MetricTypeHistogram
	case *otlpmetrics.Metric_ExponentialHistogram:
		return MetricTypeExponentialHistogram
	case *otlpmetrics.Metric_Summary:
		return MetricTypeSummary
	}
	return MetricTypeEmpty
}

// Gauge returns the gauge associated with this Metric.
//
// Calling this function when Type() != MetricTypeGauge returns an invalid
// zero-initialized instance of Gauge. Note that using such Gauge instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Gauge() Gauge {
	_, ok := ms.getOrig().GetData().(*otlpmetrics.Metric_Gauge)
	if !ok {
		return Gauge{}
	}
	return newGaugeFromParent(ms)
}

// SetEmptyGauge sets an empty gauge to this Metric.
//
// After this, Type() function will return MetricTypeGauge".
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) SetEmptyGauge() Gauge {
	ms.ensureMutability()
	val := &otlpmetrics.Gauge{}
	ms.getOrig().Data = &otlpmetrics.Metric_Gauge{Gauge: val}
	return newGaugeFromParent(ms)
}

// Sum returns the sum associated with this Metric.
//
// Calling this function when Type() != MetricTypeSum returns an invalid
// zero-initialized instance of Sum. Note that using such Sum instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Sum() Sum {
	_, ok := ms.getOrig().GetData().(*otlpmetrics.Metric_Sum)
	if !ok {
		return Sum{}
	}
	return newSumFromParent(ms)
}

// SetEmptySum sets an empty sum to this Metric.
//
// After this, Type() function will return MetricTypeSum".
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) SetEmptySum() Sum {
	ms.ensureMutability()
	val := &otlpmetrics.Sum{}
	ms.getOrig().Data = &otlpmetrics.Metric_Sum{Sum: val}
	return newSumFromParent(ms)
}

// Histogram returns the histogram associated with this Metric.
//
// Calling this function when Type() != MetricTypeHistogram returns an invalid
// zero-initialized instance of Histogram. Note that using such Histogram instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Histogram() Histogram {
	_, ok := ms.getOrig().GetData().(*otlpmetrics.Metric_Histogram)
	if !ok {
		return Histogram{}
	}
	return newHistogramFromParent(ms)
}

// SetEmptyHistogram sets an empty histogram to this Metric.
//
// After this, Type() function will return MetricTypeHistogram".
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) SetEmptyHistogram() Histogram {
	ms.ensureMutability()
	val := &otlpmetrics.Histogram{}
	ms.getOrig().Data = &otlpmetrics.Metric_Histogram{Histogram: val}
	return newHistogramFromParent(ms)
}

// ExponentialHistogram returns the exponentialhistogram associated with this Metric.
//
// Calling this function when Type() != MetricTypeExponentialHistogram returns an invalid
// zero-initialized instance of ExponentialHistogram. Note that using such ExponentialHistogram instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) ExponentialHistogram() ExponentialHistogram {
	_, ok := ms.getOrig().GetData().(*otlpmetrics.Metric_ExponentialHistogram)
	if !ok {
		return ExponentialHistogram{}
	}
	return newExponentialHistogramFromParent(ms)
}

// SetEmptyExponentialHistogram sets an empty exponentialhistogram to this Metric.
//
// After this, Type() function will return MetricTypeExponentialHistogram".
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) SetEmptyExponentialHistogram() ExponentialHistogram {
	ms.ensureMutability()
	val := &otlpmetrics.ExponentialHistogram{}
	ms.getOrig().Data = &otlpmetrics.Metric_ExponentialHistogram{ExponentialHistogram: val}
	return newExponentialHistogramFromParent(ms)
}

// Summary returns the summary associated with this Metric.
//
// Calling this function when Type() != MetricTypeSummary returns an invalid
// zero-initialized instance of Summary. Note that using such Summary instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) Summary() Summary {
	_, ok := ms.getOrig().GetData().(*otlpmetrics.Metric_Summary)
	if !ok {
		return Summary{}
	}
	return newSummaryFromParent(ms)
}

// SetEmptySummary sets an empty summary to this Metric.
//
// After this, Type() function will return MetricTypeSummary".
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms Metric) SetEmptySummary() Summary {
	ms.ensureMutability()
	val := &otlpmetrics.Summary{}
	ms.getOrig().Data = &otlpmetrics.Metric_Summary{Summary: val}
	return newSummaryFromParent(ms)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms Metric) CopyTo(dest Metric) {
	dest.ensureMutability()
	dest.SetName(ms.Name())
	dest.SetDescription(ms.Description())
	dest.SetUnit(ms.Unit())
	switch ms.Type() {
	case MetricTypeGauge:
		ms.Gauge().CopyTo(dest.SetEmptyGauge())
	case MetricTypeSum:
		ms.Sum().CopyTo(dest.SetEmptySum())
	case MetricTypeHistogram:
		ms.Histogram().CopyTo(dest.SetEmptyHistogram())
	case MetricTypeExponentialHistogram:
		ms.ExponentialHistogram().CopyTo(dest.SetEmptyExponentialHistogram())
	case MetricTypeSummary:
		ms.Summary().CopyTo(dest.SetEmptySummary())
	}

}
