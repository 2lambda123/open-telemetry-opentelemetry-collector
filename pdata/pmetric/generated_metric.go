// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Metric represents one metric as a collection of datapoints.
// See Metric definition in OTLP: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/metrics/v1/metrics.proto
type Metric interface {
	commonMetric
	Gauge() Gauge
	Sum() Sum
	Histogram() Histogram
	ExponentialHistogram() ExponentialHistogram
	Summary() Summary
}

type MutableMetric interface {
	commonMetric
	MoveTo(dest MutableMetric)
	SetName(string)
	SetDescription(string)
	SetUnit(string)
	Gauge() MutableGauge
	SetEmptyGauge() MutableGauge
	Sum() MutableSum
	SetEmptySum() MutableSum
	Histogram() MutableHistogram
	SetEmptyHistogram() MutableHistogram
	ExponentialHistogram() MutableExponentialHistogram
	SetEmptyExponentialHistogram() MutableExponentialHistogram
	Summary() MutableSummary
	SetEmptySummary() MutableSummary
}

type commonMetric interface {
	getOrig() *otlpmetrics.Metric
	CopyTo(dest MutableMetric)
	Name() string
	Description() string
	Unit() string
	Type() MetricType
}

type immutableMetric struct {
	orig *otlpmetrics.Metric
}

type mutableMetric struct {
	immutableMetric
}

func newImmutableMetric(orig *otlpmetrics.Metric) immutableMetric {
	return immutableMetric{orig}
}

func newMutableMetric(orig *otlpmetrics.Metric) mutableMetric {
	return mutableMetric{immutableMetric{orig}}
}

func (ms immutableMetric) getOrig() *otlpmetrics.Metric {
	return ms.orig
}

// NewMetric creates a new empty Metric.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMetric() MutableMetric {
	return newMutableMetric(&otlpmetrics.Metric{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableMetric) MoveTo(dest MutableMetric) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.Metric{}
}

// Name returns the name associated with this Metric.
func (ms immutableMetric) Name() string {
	return ms.getOrig().Name
}

// SetName replaces the name associated with this Metric.
func (ms mutableMetric) SetName(v string) {
	ms.getOrig().Name = v
}

// Description returns the description associated with this Metric.
func (ms immutableMetric) Description() string {
	return ms.getOrig().Description
}

// SetDescription replaces the description associated with this Metric.
func (ms mutableMetric) SetDescription(v string) {
	ms.getOrig().Description = v
}

// Unit returns the unit associated with this Metric.
func (ms immutableMetric) Unit() string {
	return ms.getOrig().Unit
}

// SetUnit replaces the unit associated with this Metric.
func (ms mutableMetric) SetUnit(v string) {
	ms.getOrig().Unit = v
}

// Type returns the type of the data for this Metric.
// Calling this function on zero-initialized Metric will cause a panic.
func (ms immutableMetric) Type() MetricType {
	switch ms.getOrig().Data.(type) {
	case *otlpmetrics.Metric_Gauge:
		return MetricTypeGauge
	case *otlpmetrics.Metric_Sum:
		return MetricTypeSum
	case *otlpmetrics.Metric_Histogram:
		return MetricTypeHistogram
	case *otlpmetrics.Metric_ExponentialHistogram:
		return MetricTypeExponentialHistogram
	case *otlpmetrics.Metric_Summary:
		return MetricTypeSummary
	}
	return MetricTypeEmpty
}

// Gauge returns the gauge associated with this Metric.
//
// Calling this function when Type() != MetricTypeGauge returns an invalid
// zero-initialized instance of Gauge. Note that using such Gauge instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms immutableMetric) Gauge() Gauge {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Gauge)
	if !ok {
		return immutableGauge{}
	}
	return newImmutableGauge(v.Gauge)
}

func (ms mutableMetric) Gauge() MutableGauge {
	return mutableGauge{ms.immutableMetric.Gauge().(immutableGauge)}
}

// SetEmptyGauge sets an empty gauge to this Metric.
//
// After this, Type() function will return MetricTypeGauge".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms mutableMetric) SetEmptyGauge() MutableGauge {
	val := &otlpmetrics.Gauge{}
	ms.orig.Data = &otlpmetrics.Metric_Gauge{Gauge: val}
	return newMutableGauge(val)
}

// Sum returns the sum associated with this Metric.
//
// Calling this function when Type() != MetricTypeSum returns an invalid
// zero-initialized instance of Sum. Note that using such Sum instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms immutableMetric) Sum() Sum {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Sum)
	if !ok {
		return immutableSum{}
	}
	return newImmutableSum(v.Sum)
}

func (ms mutableMetric) Sum() MutableSum {
	return mutableSum{ms.immutableMetric.Sum().(immutableSum)}
}

// SetEmptySum sets an empty sum to this Metric.
//
// After this, Type() function will return MetricTypeSum".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms mutableMetric) SetEmptySum() MutableSum {
	val := &otlpmetrics.Sum{}
	ms.orig.Data = &otlpmetrics.Metric_Sum{Sum: val}
	return newMutableSum(val)
}

// Histogram returns the histogram associated with this Metric.
//
// Calling this function when Type() != MetricTypeHistogram returns an invalid
// zero-initialized instance of Histogram. Note that using such Histogram instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms immutableMetric) Histogram() Histogram {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Histogram)
	if !ok {
		return immutableHistogram{}
	}
	return newImmutableHistogram(v.Histogram)
}

func (ms mutableMetric) Histogram() MutableHistogram {
	return mutableHistogram{ms.immutableMetric.Histogram().(immutableHistogram)}
}

// SetEmptyHistogram sets an empty histogram to this Metric.
//
// After this, Type() function will return MetricTypeHistogram".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms mutableMetric) SetEmptyHistogram() MutableHistogram {
	val := &otlpmetrics.Histogram{}
	ms.orig.Data = &otlpmetrics.Metric_Histogram{Histogram: val}
	return newMutableHistogram(val)
}

// ExponentialHistogram returns the exponentialhistogram associated with this Metric.
//
// Calling this function when Type() != MetricTypeExponentialHistogram returns an invalid
// zero-initialized instance of ExponentialHistogram. Note that using such ExponentialHistogram instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms immutableMetric) ExponentialHistogram() ExponentialHistogram {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_ExponentialHistogram)
	if !ok {
		return immutableExponentialHistogram{}
	}
	return newImmutableExponentialHistogram(v.ExponentialHistogram)
}

func (ms mutableMetric) ExponentialHistogram() MutableExponentialHistogram {
	return mutableExponentialHistogram{ms.immutableMetric.ExponentialHistogram().(immutableExponentialHistogram)}
}

// SetEmptyExponentialHistogram sets an empty exponentialhistogram to this Metric.
//
// After this, Type() function will return MetricTypeExponentialHistogram".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms mutableMetric) SetEmptyExponentialHistogram() MutableExponentialHistogram {
	val := &otlpmetrics.ExponentialHistogram{}
	ms.orig.Data = &otlpmetrics.Metric_ExponentialHistogram{ExponentialHistogram: val}
	return newMutableExponentialHistogram(val)
}

// Summary returns the summary associated with this Metric.
//
// Calling this function when Type() != MetricTypeSummary returns an invalid
// zero-initialized instance of Summary. Note that using such Summary instance can cause panic.
//
// Calling this function on zero-initialized Metric will cause a panic.
func (ms immutableMetric) Summary() Summary {
	v, ok := ms.orig.GetData().(*otlpmetrics.Metric_Summary)
	if !ok {
		return immutableSummary{}
	}
	return newImmutableSummary(v.Summary)
}

func (ms mutableMetric) Summary() MutableSummary {
	return mutableSummary{ms.immutableMetric.Summary().(immutableSummary)}
}

// SetEmptySummary sets an empty summary to this Metric.
//
// After this, Type() function will return MetricTypeSummary".
//
// Calling this function on zero-initialized MutableMetric will cause a panic.
func (ms mutableMetric) SetEmptySummary() MutableSummary {
	val := &otlpmetrics.Summary{}
	ms.orig.Data = &otlpmetrics.Metric_Summary{Summary: val}
	return newMutableSummary(val)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableMetric) CopyTo(dest MutableMetric) {
	dest.SetName(ms.Name())
	dest.SetDescription(ms.Description())
	dest.SetUnit(ms.Unit())
	switch ms.Type() {
	case MetricTypeGauge:
		ms.Gauge().CopyTo(dest.SetEmptyGauge())
	case MetricTypeSum:
		ms.Sum().CopyTo(dest.SetEmptySum())
	case MetricTypeHistogram:
		ms.Histogram().CopyTo(dest.SetEmptyHistogram())
	case MetricTypeExponentialHistogram:
		ms.ExponentialHistogram().CopyTo(dest.SetEmptyExponentialHistogram())
	case MetricTypeSummary:
		ms.Summary().CopyTo(dest.SetEmptySummary())
	}

}

func generateTestMetric() MutableMetric {
	tv := NewMetric()
	fillTestMetric(tv)
	return tv
}

func fillTestMetric(tv MutableMetric) {
	tv.getOrig().Name = "test_name"
	tv.getOrig().Description = "test_description"
	tv.getOrig().Unit = "1"
	tv.orig.Data = &otlpmetrics.Metric_Sum{Sum: &otlpmetrics.Sum{}}
	fillTestSum(newSum(tv.orig.GetSum()))
}
