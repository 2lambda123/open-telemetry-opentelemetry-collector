// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// SummaryDataPoint is a single data point in a timeseries that describes the time-varying values of a Summary of double values.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSummaryDataPoint function to create new instances.
// Important: zero-initialized instance is not valid for use.
type SummaryDataPoint struct {
	commonSummaryDataPoint
}

type MutableSummaryDataPoint struct {
	commonSummaryDataPoint
	preventConversion struct{} // nolint:unused
}

type commonSummaryDataPoint struct {
	orig *otlpmetrics.SummaryDataPoint
}

func newSummaryDataPointFromOrig(orig *otlpmetrics.SummaryDataPoint) SummaryDataPoint {
	return SummaryDataPoint{commonSummaryDataPoint{orig}}
}

func newMutableSummaryDataPointFromOrig(orig *otlpmetrics.SummaryDataPoint) MutableSummaryDataPoint {
	return MutableSummaryDataPoint{commonSummaryDataPoint: commonSummaryDataPoint{orig}}
}

// NewMutableSummaryDataPoint creates a new empty SummaryDataPoint.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSummaryDataPoint() MutableSummaryDataPoint {
	return newMutableSummaryDataPointFromOrig(&otlpmetrics.SummaryDataPoint{})
}

// nolint:unused
func (ms SummaryDataPoint) asMutable() MutableSummaryDataPoint {
	return MutableSummaryDataPoint{commonSummaryDataPoint: commonSummaryDataPoint{orig: ms.orig}}
}

func (ms MutableSummaryDataPoint) AsImmutable() SummaryDataPoint {
	return SummaryDataPoint{commonSummaryDataPoint{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSummaryDataPoint) MoveTo(dest MutableSummaryDataPoint) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.SummaryDataPoint{}
}

// Attributes returns the Attributes associated with this SummaryDataPoint.
func (ms SummaryDataPoint) Attributes() pcommon.Map {
	return internal.NewMapFromOrig(&ms.orig.Attributes)
}

func (ms MutableSummaryDataPoint) Attributes() pcommon.MutableMap {
	return internal.NewMutableMapFromOrig(&ms.orig.Attributes)
}

// StartTimestamp returns the starttimestamp associated with this SummaryDataPoint.
func (ms commonSummaryDataPoint) StartTimestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.StartTimeUnixNano)
}

// SetStartTimestamp replaces the starttimestamp associated with this SummaryDataPoint.
func (ms MutableSummaryDataPoint) SetStartTimestamp(v pcommon.Timestamp) {
	ms.orig.StartTimeUnixNano = uint64(v)
}

// Timestamp returns the timestamp associated with this SummaryDataPoint.
func (ms commonSummaryDataPoint) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this SummaryDataPoint.
func (ms MutableSummaryDataPoint) SetTimestamp(v pcommon.Timestamp) {
	ms.orig.TimeUnixNano = uint64(v)
}

// Count returns the count associated with this SummaryDataPoint.
func (ms commonSummaryDataPoint) Count() uint64 {
	return ms.orig.Count
}

// SetCount replaces the count associated with this SummaryDataPoint.
func (ms MutableSummaryDataPoint) SetCount(v uint64) {
	ms.orig.Count = v
}

// Sum returns the sum associated with this SummaryDataPoint.
func (ms commonSummaryDataPoint) Sum() float64 {
	return ms.orig.Sum
}

// SetSum replaces the sum associated with this SummaryDataPoint.
func (ms MutableSummaryDataPoint) SetSum(v float64) {
	ms.orig.Sum = v
}

// QuantileValues returns the QuantileValues associated with this SummaryDataPoint.
func (ms SummaryDataPoint) QuantileValues() SummaryDataPointValueAtQuantileSlice {
	return newSummaryDataPointValueAtQuantileSliceFromOrig(&ms.orig.QuantileValues)
}

func (ms MutableSummaryDataPoint) QuantileValues() MutableSummaryDataPointValueAtQuantileSlice {
	return newMutableSummaryDataPointValueAtQuantileSliceFromOrig(&ms.orig.QuantileValues)
}

// Flags returns the flags associated with this SummaryDataPoint.
func (ms commonSummaryDataPoint) Flags() DataPointFlags {
	return DataPointFlags(ms.orig.Flags)
}

// SetFlags replaces the flags associated with this SummaryDataPoint.
func (ms MutableSummaryDataPoint) SetFlags(v DataPointFlags) {
	ms.orig.Flags = uint32(v)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSummaryDataPoint) CopyTo(dest MutableSummaryDataPoint) {
	SummaryDataPoint{ms}.Attributes().CopyTo(dest.Attributes())
	dest.SetStartTimestamp(ms.StartTimestamp())
	dest.SetTimestamp(ms.Timestamp())
	dest.SetCount(ms.Count())
	dest.SetSum(ms.Sum())
	SummaryDataPoint{ms}.QuantileValues().CopyTo(dest.QuantileValues())
	dest.SetFlags(ms.Flags())
}

func generateTestSummaryDataPoint() MutableSummaryDataPoint {
	tv := NewMutableSummaryDataPoint()
	fillTestSummaryDataPoint(tv)
	return tv
}

func fillTestSummaryDataPoint(tv MutableSummaryDataPoint) {
	internal.FillTestMap(internal.NewMutableMapFromOrig(&tv.orig.Attributes))
	tv.orig.StartTimeUnixNano = 1234567890
	tv.orig.TimeUnixNano = 1234567890
	tv.orig.Count = uint64(17)
	tv.orig.Sum = float64(17.13)
	fillTestSummaryDataPointValueAtQuantileSlice(newMutableSummaryDataPointValueAtQuantileSliceFromOrig(&tv.orig.QuantileValues))
	tv.orig.Flags = 1
}
