// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// Exemplar is a sample input double measurement.
//
// Exemplars also hold information about the environment when the measurement was recorded,
// for example the span and trace ID of the active span when the exemplar was recorded.
type Exemplar interface {
	commonExemplar
	FilteredAttributes() pcommon.Map
}

type MutableExemplar interface {
	commonExemplar
	MoveTo(dest MutableExemplar)
	SetTimestamp(pcommon.Timestamp)
	SetDoubleValue(float64)
	SetIntValue(int64)
	FilteredAttributes() pcommon.MutableMap
	SetTraceID(pcommon.TraceID)
	SetSpanID(pcommon.SpanID)
}

type commonExemplar interface {
	getOrig() *otlpmetrics.Exemplar
	CopyTo(dest MutableExemplar)
	Timestamp() pcommon.Timestamp
	ValueType() ExemplarValueType
	DoubleValue() float64
	IntValue() int64
	TraceID() pcommon.TraceID
	SpanID() pcommon.SpanID
}

type immutableExemplar struct {
	orig *otlpmetrics.Exemplar
}

type mutableExemplar struct {
	immutableExemplar
}

func newImmutableExemplar(orig *otlpmetrics.Exemplar) immutableExemplar {
	return immutableExemplar{orig}
}

func newMutableExemplar(orig *otlpmetrics.Exemplar) mutableExemplar {
	return mutableExemplar{immutableExemplar{orig}}
}

func (ms immutableExemplar) getOrig() *otlpmetrics.Exemplar {
	return ms.orig
}

// NewExemplar creates a new empty Exemplar.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewExemplar() MutableExemplar {
	return newMutableExemplar(&otlpmetrics.Exemplar{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableExemplar) MoveTo(dest MutableExemplar) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.Exemplar{}
}

// Timestamp returns the timestamp associated with this Exemplar.
func (ms immutableExemplar) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this Exemplar.
func (ms mutableExemplar) SetTimestamp(v pcommon.Timestamp) {
	ms.orig.TimeUnixNano = uint64(v)
}

// ValueType returns the type of the value for this Exemplar.
// Calling this function on zero-initialized Exemplar will cause a panic.
func (ms immutableExemplar) ValueType() ExemplarValueType {
	switch ms.getOrig().Value.(type) {
	case *otlpmetrics.Exemplar_AsDouble:
		return ExemplarValueTypeDouble
	case *otlpmetrics.Exemplar_AsInt:
		return ExemplarValueTypeInt
	}
	return ExemplarValueTypeEmpty
}

// DoubleValue returns the double associated with this Exemplar.
func (ms immutableExemplar) DoubleValue() float64 {
	return ms.orig.GetAsDouble()
}

// SetDoubleValue replaces the double associated with this Exemplar.
func (ms mutableExemplar) SetDoubleValue(v float64) {
	ms.orig.Value = &otlpmetrics.Exemplar_AsDouble{
		AsDouble: v,
	}
}

// IntValue returns the int associated with this Exemplar.
func (ms immutableExemplar) IntValue() int64 {
	return ms.orig.GetAsInt()
}

// SetIntValue replaces the int associated with this Exemplar.
func (ms mutableExemplar) SetIntValue(v int64) {
	ms.orig.Value = &otlpmetrics.Exemplar_AsInt{
		AsInt: v,
	}
}

// FilteredAttributes returns the FilteredAttributes associated with this Exemplar.
func (ms immutableExemplar) FilteredAttributes() pcommon.Map {
	return internal.NewImmutableMap(&ms.getOrig().FilteredAttributes)
}

func (ms mutableExemplar) FilteredAttributes() pcommon.MutableMap {
	return internal.NewMutableMap(&ms.getOrig().FilteredAttributes)
}

// TraceID returns the traceid associated with this Exemplar.
func (ms immutableExemplar) TraceID() pcommon.TraceID {
	return pcommon.TraceID(ms.orig.TraceId)
}

// SetTraceID replaces the traceid associated with this Exemplar.
func (ms mutableExemplar) SetTraceID(v pcommon.TraceID) {
	ms.orig.TraceId = data.TraceID(v)
}

// SpanID returns the spanid associated with this Exemplar.
func (ms immutableExemplar) SpanID() pcommon.SpanID {
	return pcommon.SpanID(ms.orig.SpanId)
}

// SetSpanID replaces the spanid associated with this Exemplar.
func (ms mutableExemplar) SetSpanID(v pcommon.SpanID) {
	ms.orig.SpanId = data.SpanID(v)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableExemplar) CopyTo(dest MutableExemplar) {
	dest.SetTimestamp(ms.Timestamp())
	switch ms.ValueType() {
	case ExemplarValueTypeDouble:
		dest.SetDoubleValue(ms.DoubleValue())
	case ExemplarValueTypeInt:
		dest.SetIntValue(ms.IntValue())
	}

	ms.FilteredAttributes().CopyTo(dest.FilteredAttributes())
	dest.SetTraceID(ms.TraceID())
	dest.SetSpanID(ms.SpanID())
}

func generateTestExemplar() MutableExemplar {
	tv := NewExemplar()
	fillTestExemplar(tv)
	return tv
}

func fillTestExemplar(tv MutableExemplar) {
	tv.getOrig().TimeUnixNano = 1234567890
	tv.orig.Value = &otlpmetrics.Exemplar_AsInt{AsInt: int64(17)}
	internal.FillTestMap(internal.NewMutableMap(&tv.getOrig().FilteredAttributes))
	tv.getOrig().TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
	tv.getOrig().SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
}
