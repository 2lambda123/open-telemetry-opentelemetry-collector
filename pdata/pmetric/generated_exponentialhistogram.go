// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// ExponentialHistogram represents the type of a metric that is calculated by aggregating
// as a ExponentialHistogram of all reported double measurements over a time interval.
type ExponentialHistogram interface {
	commonExponentialHistogram
	DataPoints() ExponentialHistogramDataPointSlice
}

type MutableExponentialHistogram interface {
	commonExponentialHistogram
	MoveTo(dest MutableExponentialHistogram)
	SetAggregationTemporality(AggregationTemporality)
	DataPoints() MutableExponentialHistogramDataPointSlice
}

type commonExponentialHistogram interface {
	getOrig() *otlpmetrics.ExponentialHistogram
	CopyTo(dest MutableExponentialHistogram)
	AggregationTemporality() AggregationTemporality
}

type immutableExponentialHistogram struct {
	orig *otlpmetrics.ExponentialHistogram
}

type mutableExponentialHistogram struct {
	immutableExponentialHistogram
}

func newImmutableExponentialHistogram(orig *otlpmetrics.ExponentialHistogram) immutableExponentialHistogram {
	return immutableExponentialHistogram{orig}
}

func newMutableExponentialHistogram(orig *otlpmetrics.ExponentialHistogram) mutableExponentialHistogram {
	return mutableExponentialHistogram{immutableExponentialHistogram{orig}}
}

func (ms immutableExponentialHistogram) getOrig() *otlpmetrics.ExponentialHistogram {
	return ms.orig
}

// NewExponentialHistogram creates a new empty ExponentialHistogram.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewExponentialHistogram() MutableExponentialHistogram {
	return newMutableExponentialHistogram(&otlpmetrics.ExponentialHistogram{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableExponentialHistogram) MoveTo(dest MutableExponentialHistogram) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.ExponentialHistogram{}
}

// AggregationTemporality returns the aggregationtemporality associated with this ExponentialHistogram.
func (ms immutableExponentialHistogram) AggregationTemporality() AggregationTemporality {
	return AggregationTemporality(ms.orig.AggregationTemporality)
}

// SetAggregationTemporality replaces the aggregationtemporality associated with this ExponentialHistogram.
func (ms mutableExponentialHistogram) SetAggregationTemporality(v AggregationTemporality) {
	ms.orig.AggregationTemporality = otlpmetrics.AggregationTemporality(v)
}

// DataPoints returns the DataPoints associated with this ExponentialHistogram.
func (ms immutableExponentialHistogram) DataPoints() ExponentialHistogramDataPointSlice {
	return newImmutableExponentialHistogramDataPointSlice(&ms.getOrig().DataPoints)
}

func (ms mutableExponentialHistogram) DataPoints() MutableExponentialHistogramDataPointSlice {
	return newMutableExponentialHistogramDataPointSlice(&ms.getOrig().DataPoints)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableExponentialHistogram) CopyTo(dest MutableExponentialHistogram) {
	dest.SetAggregationTemporality(ms.AggregationTemporality())
	ms.DataPoints().CopyTo(dest.DataPoints())
}

func generateTestExponentialHistogram() MutableExponentialHistogram {
	tv := NewExponentialHistogram()
	fillTestExponentialHistogram(tv)
	return tv
}

func fillTestExponentialHistogram(tv MutableExponentialHistogram) {
	tv.getOrig().AggregationTemporality = otlpmetrics.AggregationTemporality(1)
	fillTestExponentialHistogramDataPointSlice(newMutableExponentialHistogramDataPointSlice(&tv.getOrig().DataPoints))
}
