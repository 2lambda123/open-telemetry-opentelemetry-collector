// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// SummaryDataPointValueAtQuantile is a quantile value within a Summary data point.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSummaryDataPointValueAtQuantile function to create new instances.
// Important: zero-initialized instance is not valid for use.
type SummaryDataPointValueAtQuantile struct {
	commonSummaryDataPointValueAtQuantile
}

type MutableSummaryDataPointValueAtQuantile struct {
	commonSummaryDataPointValueAtQuantile
	preventConversion struct{} // nolint:unused
}

type commonSummaryDataPointValueAtQuantile struct {
	orig *otlpmetrics.SummaryDataPoint_ValueAtQuantile
}

func newSummaryDataPointValueAtQuantileFromOrig(orig *otlpmetrics.SummaryDataPoint_ValueAtQuantile) SummaryDataPointValueAtQuantile {
	return SummaryDataPointValueAtQuantile{commonSummaryDataPointValueAtQuantile{orig}}
}

func newMutableSummaryDataPointValueAtQuantileFromOrig(orig *otlpmetrics.SummaryDataPoint_ValueAtQuantile) MutableSummaryDataPointValueAtQuantile {
	return MutableSummaryDataPointValueAtQuantile{commonSummaryDataPointValueAtQuantile: commonSummaryDataPointValueAtQuantile{orig}}
}

// NewMutableSummaryDataPointValueAtQuantile creates a new empty SummaryDataPointValueAtQuantile.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSummaryDataPointValueAtQuantile() MutableSummaryDataPointValueAtQuantile {
	return newMutableSummaryDataPointValueAtQuantileFromOrig(&otlpmetrics.SummaryDataPoint_ValueAtQuantile{})
}

// nolint:unused
func (ms SummaryDataPointValueAtQuantile) asMutable() MutableSummaryDataPointValueAtQuantile {
	return MutableSummaryDataPointValueAtQuantile{commonSummaryDataPointValueAtQuantile: commonSummaryDataPointValueAtQuantile{orig: ms.orig}}
}

func (ms MutableSummaryDataPointValueAtQuantile) AsImmutable() SummaryDataPointValueAtQuantile {
	return SummaryDataPointValueAtQuantile{commonSummaryDataPointValueAtQuantile{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSummaryDataPointValueAtQuantile) MoveTo(dest MutableSummaryDataPointValueAtQuantile) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.SummaryDataPoint_ValueAtQuantile{}
}

// Quantile returns the quantile associated with this SummaryDataPointValueAtQuantile.
func (ms commonSummaryDataPointValueAtQuantile) Quantile() float64 {
	return ms.orig.Quantile
}

// SetQuantile replaces the quantile associated with this SummaryDataPointValueAtQuantile.
func (ms MutableSummaryDataPointValueAtQuantile) SetQuantile(v float64) {
	ms.orig.Quantile = v
}

// Value returns the value associated with this SummaryDataPointValueAtQuantile.
func (ms commonSummaryDataPointValueAtQuantile) Value() float64 {
	return ms.orig.Value
}

// SetValue replaces the value associated with this SummaryDataPointValueAtQuantile.
func (ms MutableSummaryDataPointValueAtQuantile) SetValue(v float64) {
	ms.orig.Value = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSummaryDataPointValueAtQuantile) CopyTo(dest MutableSummaryDataPointValueAtQuantile) {
	dest.SetQuantile(ms.Quantile())
	dest.SetValue(ms.Value())
}

func generateTestSummaryDataPointValueAtQuantile() MutableSummaryDataPointValueAtQuantile {
	tv := NewMutableSummaryDataPointValueAtQuantile()
	fillTestSummaryDataPointValueAtQuantile(tv)
	return tv
}

func fillTestSummaryDataPointValueAtQuantile(tv MutableSummaryDataPointValueAtQuantile) {
	tv.orig.Quantile = float64(17.13)
	tv.orig.Value = float64(17.13)
}
