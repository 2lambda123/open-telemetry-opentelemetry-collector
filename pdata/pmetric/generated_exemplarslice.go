// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// ExemplarSlice logically represents a slice of Exemplar.
type ExemplarSlice interface {
	commonExemplarSlice
	At(ix int) Exemplar
}

type MutableExemplarSlice interface {
	commonExemplarSlice
	RemoveIf(f func(MutableExemplar) bool)
	At(ix int) MutableExemplar
	EnsureCapacity(newCap int)
	AppendEmpty() MutableExemplar
}

type commonExemplarSlice interface {
	Len() int
	CopyTo(dest MutableExemplarSlice)
	getOrig() *[]otlpmetrics.Exemplar
}

type immutableExemplarSlice struct {
	orig *[]otlpmetrics.Exemplar
}

type mutableExemplarSlice struct {
	immutableExemplarSlice
}

func newImmutableExemplarSlice(orig *[]otlpmetrics.Exemplar) immutableExemplarSlice {
	return immutableExemplarSlice{orig}
}

func newMutableExemplarSlice(orig *[]otlpmetrics.Exemplar) mutableExemplarSlice {
	return mutableExemplarSlice{immutableExemplarSlice{orig}}
}

func (es immutableExemplarSlice) getOrig() *[]otlpmetrics.Exemplar {
	return es.orig
}

// NewExemplarSlice creates a ExemplarSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewExemplarSlice() MutableExemplarSlice {
	orig := []otlpmetrics.Exemplar(nil)
	return newMutableExemplarSlice(&orig)
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewExemplarSlice()".
func (es immutableExemplarSlice) Len() int {
	return len(*es.orig)
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es immutableExemplarSlice) At(ix int) Exemplar {
	return newImmutableExemplar(&(*es.orig)[ix])
}

func (es mutableExemplarSlice) At(ix int) MutableExemplar {
	return newMutableExemplar(&(*es.getOrig())[ix])
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es immutableExemplarSlice) CopyTo(dest MutableExemplarSlice) {
	srcLen := es.Len()
	destCap := cap(*dest.getOrig())
	if srcLen <= destCap {
		(*dest.getOrig()) = (*dest.getOrig())[:srcLen:destCap]
	} else {
		(*dest.getOrig()) = make([]otlpmetrics.Exemplar, srcLen)
	}

	for i := range *es.getOrig() {
		newImmutableExemplar(&(*es.getOrig())[i]).CopyTo(newMutableExemplar(&(*dest.getOrig())[i]))
	}
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new ExemplarSlice can be initialized:
//
//	es := NewExemplarSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es mutableExemplarSlice) EnsureCapacity(newCap int) {
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]otlpmetrics.Exemplar, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty Exemplar.
// It returns the newly added Exemplar.
func (es mutableExemplarSlice) AppendEmpty() MutableExemplar {
	*es.getOrig() = append(*es.getOrig(), otlpmetrics.Exemplar{})
	return es.At(es.Len() - 1)
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es mutableExemplarSlice) MoveAndAppendTo(dest mutableExemplarSlice) {
	if *dest.getOrig() == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.getOrig() = *es.getOrig()
	} else {
		*dest.getOrig() = append(*dest.getOrig(), *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es mutableExemplarSlice) RemoveIf(f func(MutableExemplar) bool) {
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	// TODO: Prevent memory leak by erasing truncated values.
	*es.orig = (*es.orig)[:newLen]
}

func generateTestExemplarSlice() MutableExemplarSlice {
	tv := NewExemplarSlice()
	fillTestExemplarSlice(tv)
	return tv
}

func fillTestExemplarSlice(tv ExemplarSlice) {
	*tv.orig = make([]otlpmetrics.Exemplar, 7)
	for i := 0; i < 7; i++ {
		fillTestExemplar(newExemplar(&(*tv.orig)[i]))
	}
}
