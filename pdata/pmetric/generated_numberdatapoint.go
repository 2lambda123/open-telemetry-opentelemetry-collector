// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// NumberDataPoint is a single data point in a timeseries that describes the time-varying value of a number metric.
type NumberDataPoint interface {
	commonNumberDataPoint
	Attributes() pcommon.Map
	Exemplars() ExemplarSlice
}

type MutableNumberDataPoint interface {
	commonNumberDataPoint
	MoveTo(dest MutableNumberDataPoint)
	Attributes() pcommon.MutableMap
	SetStartTimestamp(pcommon.Timestamp)
	SetTimestamp(pcommon.Timestamp)
	SetDoubleValue(float64)
	SetIntValue(int64)
	Exemplars() MutableExemplarSlice
	SetFlags(DataPointFlags)
}

type commonNumberDataPoint interface {
	getOrig() *otlpmetrics.NumberDataPoint
	CopyTo(dest MutableNumberDataPoint)
	StartTimestamp() pcommon.Timestamp
	Timestamp() pcommon.Timestamp
	ValueType() NumberDataPointValueType
	DoubleValue() float64
	IntValue() int64
	Flags() DataPointFlags
}

type immutableNumberDataPoint struct {
	orig *otlpmetrics.NumberDataPoint
}

type mutableNumberDataPoint struct {
	immutableNumberDataPoint
}

func newImmutableNumberDataPoint(orig *otlpmetrics.NumberDataPoint) immutableNumberDataPoint {
	return immutableNumberDataPoint{orig}
}

func newMutableNumberDataPoint(orig *otlpmetrics.NumberDataPoint) mutableNumberDataPoint {
	return mutableNumberDataPoint{immutableNumberDataPoint{orig}}
}

func (ms immutableNumberDataPoint) getOrig() *otlpmetrics.NumberDataPoint {
	return ms.orig
}

// NewNumberDataPoint creates a new empty NumberDataPoint.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewNumberDataPoint() MutableNumberDataPoint {
	return newMutableNumberDataPoint(&otlpmetrics.NumberDataPoint{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableNumberDataPoint) MoveTo(dest MutableNumberDataPoint) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.NumberDataPoint{}
}

// Attributes returns the Attributes associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) Attributes() pcommon.Map {
	return internal.NewImmutableMap(&ms.getOrig().Attributes)
}

func (ms mutableNumberDataPoint) Attributes() pcommon.MutableMap {
	return internal.NewMutableMap(&ms.getOrig().Attributes)
}

// StartTimestamp returns the starttimestamp associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) StartTimestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.StartTimeUnixNano)
}

// SetStartTimestamp replaces the starttimestamp associated with this NumberDataPoint.
func (ms mutableNumberDataPoint) SetStartTimestamp(v pcommon.Timestamp) {
	ms.orig.StartTimeUnixNano = uint64(v)
}

// Timestamp returns the timestamp associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this NumberDataPoint.
func (ms mutableNumberDataPoint) SetTimestamp(v pcommon.Timestamp) {
	ms.orig.TimeUnixNano = uint64(v)
}

// ValueType returns the type of the value for this NumberDataPoint.
// Calling this function on zero-initialized NumberDataPoint will cause a panic.
func (ms immutableNumberDataPoint) ValueType() NumberDataPointValueType {
	switch ms.getOrig().Value.(type) {
	case *otlpmetrics.NumberDataPoint_AsDouble:
		return NumberDataPointValueTypeDouble
	case *otlpmetrics.NumberDataPoint_AsInt:
		return NumberDataPointValueTypeInt
	}
	return NumberDataPointValueTypeEmpty
}

// DoubleValue returns the double associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) DoubleValue() float64 {
	return ms.orig.GetAsDouble()
}

// SetDoubleValue replaces the double associated with this NumberDataPoint.
func (ms mutableNumberDataPoint) SetDoubleValue(v float64) {
	ms.orig.Value = &otlpmetrics.NumberDataPoint_AsDouble{
		AsDouble: v,
	}
}

// IntValue returns the int associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) IntValue() int64 {
	return ms.orig.GetAsInt()
}

// SetIntValue replaces the int associated with this NumberDataPoint.
func (ms mutableNumberDataPoint) SetIntValue(v int64) {
	ms.orig.Value = &otlpmetrics.NumberDataPoint_AsInt{
		AsInt: v,
	}
}

// Exemplars returns the Exemplars associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) Exemplars() ExemplarSlice {
	return newImmutableExemplarSlice(&ms.getOrig().Exemplars)
}

func (ms mutableNumberDataPoint) Exemplars() MutableExemplarSlice {
	return newMutableExemplarSlice(&ms.getOrig().Exemplars)
}

// Flags returns the flags associated with this NumberDataPoint.
func (ms immutableNumberDataPoint) Flags() DataPointFlags {
	return DataPointFlags(ms.orig.Flags)
}

// SetFlags replaces the flags associated with this NumberDataPoint.
func (ms mutableNumberDataPoint) SetFlags(v DataPointFlags) {
	ms.orig.Flags = uint32(v)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableNumberDataPoint) CopyTo(dest MutableNumberDataPoint) {
	ms.Attributes().CopyTo(dest.Attributes())
	dest.SetStartTimestamp(ms.StartTimestamp())
	dest.SetTimestamp(ms.Timestamp())
	switch ms.ValueType() {
	case NumberDataPointValueTypeDouble:
		dest.SetDoubleValue(ms.DoubleValue())
	case NumberDataPointValueTypeInt:
		dest.SetIntValue(ms.IntValue())
	}

	ms.Exemplars().CopyTo(dest.Exemplars())
	dest.SetFlags(ms.Flags())
}

func generateTestNumberDataPoint() MutableNumberDataPoint {
	tv := NewNumberDataPoint()
	fillTestNumberDataPoint(tv)
	return tv
}

func fillTestNumberDataPoint(tv MutableNumberDataPoint) {
	internal.FillTestMap(internal.NewMutableMap(&tv.getOrig().Attributes))
	tv.getOrig().StartTimeUnixNano = 1234567890
	tv.getOrig().TimeUnixNano = 1234567890
	tv.orig.Value = &otlpmetrics.NumberDataPoint_AsDouble{AsDouble: float64(17.13)}
	fillTestExemplarSlice(newMutableExemplarSlice(&tv.getOrig().Exemplars))
	tv.getOrig().Flags = 1
}
