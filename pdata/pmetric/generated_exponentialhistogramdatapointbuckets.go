// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ExponentialHistogramDataPointBuckets are a set of bucket counts, encoded in a contiguous array of counts.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableExponentialHistogramDataPointBuckets function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ExponentialHistogramDataPointBuckets struct {
	commonExponentialHistogramDataPointBuckets
}

type MutableExponentialHistogramDataPointBuckets struct {
	commonExponentialHistogramDataPointBuckets
	preventConversion struct{} // nolint:unused
}

type commonExponentialHistogramDataPointBuckets struct {
	orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets
}

func newExponentialHistogramDataPointBucketsFromOrig(orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets) ExponentialHistogramDataPointBuckets {
	return ExponentialHistogramDataPointBuckets{commonExponentialHistogramDataPointBuckets{orig}}
}

func newMutableExponentialHistogramDataPointBucketsFromOrig(orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets) MutableExponentialHistogramDataPointBuckets {
	return MutableExponentialHistogramDataPointBuckets{commonExponentialHistogramDataPointBuckets: commonExponentialHistogramDataPointBuckets{orig}}
}

// NewMutableExponentialHistogramDataPointBuckets creates a new empty ExponentialHistogramDataPointBuckets.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableExponentialHistogramDataPointBuckets() MutableExponentialHistogramDataPointBuckets {
	return newMutableExponentialHistogramDataPointBucketsFromOrig(&otlpmetrics.ExponentialHistogramDataPoint_Buckets{})
}

// nolint:unused
func (ms ExponentialHistogramDataPointBuckets) asMutable() MutableExponentialHistogramDataPointBuckets {
	return MutableExponentialHistogramDataPointBuckets{commonExponentialHistogramDataPointBuckets: commonExponentialHistogramDataPointBuckets{orig: ms.orig}}
}

func (ms MutableExponentialHistogramDataPointBuckets) AsImmutable() ExponentialHistogramDataPointBuckets {
	return ExponentialHistogramDataPointBuckets{commonExponentialHistogramDataPointBuckets{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableExponentialHistogramDataPointBuckets) MoveTo(dest MutableExponentialHistogramDataPointBuckets) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.ExponentialHistogramDataPoint_Buckets{}
}

// Offset returns the offset associated with this ExponentialHistogramDataPointBuckets.
func (ms commonExponentialHistogramDataPointBuckets) Offset() int32 {
	return ms.orig.Offset
}

// SetOffset replaces the offset associated with this ExponentialHistogramDataPointBuckets.
func (ms MutableExponentialHistogramDataPointBuckets) SetOffset(v int32) {
	ms.orig.Offset = v
}

// BucketCounts returns the bucketcounts associated with this ExponentialHistogramDataPointBuckets.
func (ms commonExponentialHistogramDataPointBuckets) BucketCounts() pcommon.UInt64Slice {
	return internal.NewUInt64SliceFromOrig(&ms.orig.BucketCounts)
}

func (ms MutableExponentialHistogramDataPointBuckets) BucketCounts() pcommon.MutableUInt64Slice {
	return internal.NewMutableUInt64SliceFromOrig(&ms.orig.BucketCounts)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonExponentialHistogramDataPointBuckets) CopyTo(dest MutableExponentialHistogramDataPointBuckets) {
	dest.SetOffset(ms.Offset())
	ms.BucketCounts().CopyTo(dest.BucketCounts())
}

func generateTestExponentialHistogramDataPointBuckets() MutableExponentialHistogramDataPointBuckets {
	tv := NewMutableExponentialHistogramDataPointBuckets()
	fillTestExponentialHistogramDataPointBuckets(tv)
	return tv
}

func fillTestExponentialHistogramDataPointBuckets(tv MutableExponentialHistogramDataPointBuckets) {
	tv.orig.Offset = int32(909)
	tv.orig.BucketCounts = []uint64{1, 2, 3}
}
