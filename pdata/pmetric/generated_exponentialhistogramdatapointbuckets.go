// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ExponentialHistogramDataPointBuckets are a set of bucket counts, encoded in a contiguous array of counts.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewExponentialHistogramDataPointBuckets function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ExponentialHistogramDataPointBuckets struct {
	*pExponentialHistogramDataPointBuckets
}

type pExponentialHistogramDataPointBuckets struct {
	orig   *otlpmetrics.ExponentialHistogramDataPoint_Buckets
	state  *internal.State
	parent internal.Parent[*otlpmetrics.ExponentialHistogramDataPoint_Buckets]
}

func (ms ExponentialHistogramDataPointBuckets) getOrig() *otlpmetrics.ExponentialHistogramDataPoint_Buckets {
	if *ms.state == internal.StateDirty {
		ms.orig, ms.state = ms.parent.RefreshOrigState()
	}
	return ms.orig
}

func (ms ExponentialHistogramDataPointBuckets) ensureMutability() {
	if *ms.state == internal.StateShared {
		ms.parent.EnsureMutability()
	}
}

func (ms ExponentialHistogramDataPointBuckets) getState() *internal.State {
	return ms.state
}

type wrappedExponentialHistogramDataPointBucketsBucketCounts struct {
	ExponentialHistogramDataPointBuckets
}

func (es wrappedExponentialHistogramDataPointBucketsBucketCounts) RefreshOrigState() (*[]uint64, *internal.State) {
	return &es.getOrig().BucketCounts, es.getState()
}

func (es wrappedExponentialHistogramDataPointBucketsBucketCounts) EnsureMutability() {
	es.ensureMutability()
}

func (es wrappedExponentialHistogramDataPointBucketsBucketCounts) GetState() *internal.State {
	return es.getState()
}

func newExponentialHistogramDataPointBuckets(orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets, parent internal.Parent[*otlpmetrics.ExponentialHistogramDataPoint_Buckets]) ExponentialHistogramDataPointBuckets {
	return ExponentialHistogramDataPointBuckets{&pExponentialHistogramDataPointBuckets{
		orig:   orig,
		state:  parent.GetState(),
		parent: parent,
	}}
}

// NewExponentialHistogramDataPointBuckets creates a new empty ExponentialHistogramDataPointBuckets.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewExponentialHistogramDataPointBuckets() ExponentialHistogramDataPointBuckets {
	state := internal.StateExclusive
	return ExponentialHistogramDataPointBuckets{&pExponentialHistogramDataPointBuckets{orig: &otlpmetrics.ExponentialHistogramDataPoint_Buckets{}, state: &state}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms ExponentialHistogramDataPointBuckets) MoveTo(dest ExponentialHistogramDataPointBuckets) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.ExponentialHistogramDataPoint_Buckets{}
}

// Offset returns the offset associated with this ExponentialHistogramDataPointBuckets.
func (ms ExponentialHistogramDataPointBuckets) Offset() int32 {
	return ms.getOrig().Offset
}

// SetOffset replaces the offset associated with this ExponentialHistogramDataPointBuckets.
func (ms ExponentialHistogramDataPointBuckets) SetOffset(v int32) {
	ms.ensureMutability()
	ms.getOrig().Offset = v
}

// BucketCounts returns the bucketcounts associated with this ExponentialHistogramDataPointBuckets.
func (ms ExponentialHistogramDataPointBuckets) BucketCounts() pcommon.UInt64Slice {
	return pcommon.UInt64Slice(internal.NewUInt64Slice(&ms.getOrig().BucketCounts, wrappedExponentialHistogramDataPointBucketsBucketCounts{ExponentialHistogramDataPointBuckets: ms}))
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms ExponentialHistogramDataPointBuckets) CopyTo(dest ExponentialHistogramDataPointBuckets) {
	dest.ensureMutability()
	dest.SetOffset(ms.Offset())
	ms.BucketCounts().CopyTo(dest.BucketCounts())
}
