// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ExponentialHistogramDataPointBuckets are a set of bucket counts, encoded in a contiguous array of counts.
type ExponentialHistogramDataPointBuckets interface {
	commonExponentialHistogramDataPointBuckets
	BucketCounts() pcommon.UInt64Slice
}

type MutableExponentialHistogramDataPointBuckets interface {
	commonExponentialHistogramDataPointBuckets
	MoveTo(dest MutableExponentialHistogramDataPointBuckets)
	SetOffset(int32)
	BucketCounts() pcommon.MutableUInt64Slice
}

type commonExponentialHistogramDataPointBuckets interface {
	getOrig() *otlpmetrics.ExponentialHistogramDataPoint_Buckets
	CopyTo(dest MutableExponentialHistogramDataPointBuckets)
	Offset() int32
}

type immutableExponentialHistogramDataPointBuckets struct {
	orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets
}

type mutableExponentialHistogramDataPointBuckets struct {
	immutableExponentialHistogramDataPointBuckets
}

func newImmutableExponentialHistogramDataPointBuckets(orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets) immutableExponentialHistogramDataPointBuckets {
	return immutableExponentialHistogramDataPointBuckets{orig}
}

func newMutableExponentialHistogramDataPointBuckets(orig *otlpmetrics.ExponentialHistogramDataPoint_Buckets) mutableExponentialHistogramDataPointBuckets {
	return mutableExponentialHistogramDataPointBuckets{immutableExponentialHistogramDataPointBuckets{orig}}
}

func (ms immutableExponentialHistogramDataPointBuckets) getOrig() *otlpmetrics.ExponentialHistogramDataPoint_Buckets {
	return ms.orig
}

// NewExponentialHistogramDataPointBuckets creates a new empty ExponentialHistogramDataPointBuckets.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewExponentialHistogramDataPointBuckets() MutableExponentialHistogramDataPointBuckets {
	return newMutableExponentialHistogramDataPointBuckets(&otlpmetrics.ExponentialHistogramDataPoint_Buckets{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableExponentialHistogramDataPointBuckets) MoveTo(dest MutableExponentialHistogramDataPointBuckets) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.ExponentialHistogramDataPoint_Buckets{}
}

// Offset returns the offset associated with this ExponentialHistogramDataPointBuckets.
func (ms immutableExponentialHistogramDataPointBuckets) Offset() int32 {
	return ms.getOrig().Offset
}

// SetOffset replaces the offset associated with this ExponentialHistogramDataPointBuckets.
func (ms mutableExponentialHistogramDataPointBuckets) SetOffset(v int32) {
	ms.getOrig().Offset = v
}

// BucketCounts returns the bucketcounts associated with this ExponentialHistogramDataPointBuckets.
func (ms immutableExponentialHistogramDataPointBuckets) BucketCounts() pcommon.UInt64Slice {
	return internal.NewImmutableUInt64Slice(&ms.getOrig().BucketCounts)
}

func (ms mutableExponentialHistogramDataPointBuckets) BucketCounts() pcommon.MutableUInt64Slice {
	return internal.NewMutableUInt64Slice(&ms.getOrig().BucketCounts)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableExponentialHistogramDataPointBuckets) CopyTo(dest MutableExponentialHistogramDataPointBuckets) {
	dest.SetOffset(ms.Offset())
	ms.BucketCounts().CopyTo(dest.BucketCounts())
}

func generateTestExponentialHistogramDataPointBuckets() MutableExponentialHistogramDataPointBuckets {
	tv := NewExponentialHistogramDataPointBuckets()
	fillTestExponentialHistogramDataPointBuckets(tv)
	return tv
}

func fillTestExponentialHistogramDataPointBuckets(tv MutableExponentialHistogramDataPointBuckets) {
	tv.getOrig().Offset = int32(909)
	tv.orig.BucketCounts = []uint64{1, 2, 3}
}
