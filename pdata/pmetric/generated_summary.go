// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

// Summary represents the type of a metric that is calculated by aggregating as a Summary of all reported double measurements over a time interval.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSummary function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Summary struct {
	commonSummary
}

type MutableSummary struct {
	commonSummary
	preventConversion struct{} // nolint:unused
}

type commonSummary struct {
	orig *otlpmetrics.Summary
}

func newSummaryFromOrig(orig *otlpmetrics.Summary) Summary {
	return Summary{commonSummary{orig}}
}

func newMutableSummaryFromOrig(orig *otlpmetrics.Summary) MutableSummary {
	return MutableSummary{commonSummary: commonSummary{orig}}
}

// NewMutableSummary creates a new empty Summary.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSummary() MutableSummary {
	return newMutableSummaryFromOrig(&otlpmetrics.Summary{})
}

// nolint:unused
func (ms Summary) asMutable() MutableSummary {
	return MutableSummary{commonSummary: commonSummary{orig: ms.orig}}
}

func (ms MutableSummary) AsImmutable() Summary {
	return Summary{commonSummary{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSummary) MoveTo(dest MutableSummary) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.Summary{}
}

// DataPoints returns the DataPoints associated with this Summary.
func (ms Summary) DataPoints() SummaryDataPointSlice {
	return newSummaryDataPointSliceFromOrig(&ms.orig.DataPoints)
}

func (ms MutableSummary) DataPoints() MutableSummaryDataPointSlice {
	return newMutableSummaryDataPointSliceFromOrig(&ms.orig.DataPoints)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSummary) CopyTo(dest MutableSummary) {
	Summary{ms}.DataPoints().CopyTo(dest.DataPoints())
}

func generateTestSummary() MutableSummary {
	tv := NewMutableSummary()
	fillTestSummary(tv)
	return tv
}

func fillTestSummary(tv MutableSummary) {
	fillTestSummaryDataPointSlice(newMutableSummaryDataPointSliceFromOrig(&tv.orig.DataPoints))
}
