// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeMetrics is a collection of metrics from a LibraryInstrumentation.
type ScopeMetrics interface {
	commonScopeMetrics
	Scope() pcommon.InstrumentationScope
	Metrics() MetricSlice
}

type MutableScopeMetrics interface {
	commonScopeMetrics
	MoveTo(dest MutableScopeMetrics)
	Scope() pcommon.MutableInstrumentationScope
	SetSchemaUrl(string)
	Metrics() MutableMetricSlice
}

type commonScopeMetrics interface {
	getOrig() *otlpmetrics.ScopeMetrics
	CopyTo(dest MutableScopeMetrics)
	SchemaUrl() string
}

type immutableScopeMetrics struct {
	orig *otlpmetrics.ScopeMetrics
}

type mutableScopeMetrics struct {
	immutableScopeMetrics
}

func newImmutableScopeMetrics(orig *otlpmetrics.ScopeMetrics) immutableScopeMetrics {
	return immutableScopeMetrics{orig}
}

func newMutableScopeMetrics(orig *otlpmetrics.ScopeMetrics) mutableScopeMetrics {
	return mutableScopeMetrics{immutableScopeMetrics{orig}}
}

func (ms immutableScopeMetrics) getOrig() *otlpmetrics.ScopeMetrics {
	return ms.orig
}

// NewScopeMetrics creates a new empty ScopeMetrics.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewScopeMetrics() MutableScopeMetrics {
	return newMutableScopeMetrics(&otlpmetrics.ScopeMetrics{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableScopeMetrics) MoveTo(dest MutableScopeMetrics) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpmetrics.ScopeMetrics{}
}

// Scope returns the scope associated with this ScopeMetrics.
func (ms immutableScopeMetrics) Scope() pcommon.InstrumentationScope {
	return internal.NewImmutableInstrumentationScope(&ms.getOrig().Scope)
}

// Scope returns the scope associated with this ScopeMetrics.
func (ms mutableScopeMetrics) Scope() pcommon.MutableInstrumentationScope {
	return internal.NewMutableInstrumentationScope(&ms.getOrig().Scope)
}

// SchemaUrl returns the schemaurl associated with this ScopeMetrics.
func (ms immutableScopeMetrics) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeMetrics.
func (ms mutableScopeMetrics) SetSchemaUrl(v string) {
	ms.getOrig().SchemaUrl = v
}

// Metrics returns the Metrics associated with this ScopeMetrics.
func (ms immutableScopeMetrics) Metrics() MetricSlice {
	return newImmutableMetricSlice(&ms.getOrig().Metrics)
}

func (ms mutableScopeMetrics) Metrics() MutableMetricSlice {
	return newMutableMetricSlice(&ms.getOrig().Metrics)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableScopeMetrics) CopyTo(dest MutableScopeMetrics) {
	ms.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.Metrics().CopyTo(dest.Metrics())
}

func generateTestScopeMetrics() MutableScopeMetrics {
	tv := NewScopeMetrics()
	fillTestScopeMetrics(tv)
	return tv
}

func fillTestScopeMetrics(tv MutableScopeMetrics) {
	internal.FillTestInstrumentationScope(internal.NewInstrumentationScope(&tv.orig.Scope))
	tv.getOrig().SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestMetricSlice(newMutableMetricSlice(&tv.getOrig().Metrics))
}
