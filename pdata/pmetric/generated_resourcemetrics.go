// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceMetrics is a collection of metrics from a Resource.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableResourceMetrics function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ResourceMetrics struct {
	commonResourceMetrics
}

type MutableResourceMetrics struct {
	commonResourceMetrics
	preventConversion struct{} // nolint:unused
}

type commonResourceMetrics struct {
	orig *otlpmetrics.ResourceMetrics
}

func newResourceMetricsFromOrig(orig *otlpmetrics.ResourceMetrics) ResourceMetrics {
	return ResourceMetrics{commonResourceMetrics{orig}}
}

func newMutableResourceMetricsFromOrig(orig *otlpmetrics.ResourceMetrics) MutableResourceMetrics {
	return MutableResourceMetrics{commonResourceMetrics: commonResourceMetrics{orig}}
}

// NewMutableResourceMetrics creates a new empty ResourceMetrics.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableResourceMetrics() MutableResourceMetrics {
	return newMutableResourceMetricsFromOrig(&otlpmetrics.ResourceMetrics{})
}

// nolint:unused
func (ms ResourceMetrics) asMutable() MutableResourceMetrics {
	return MutableResourceMetrics{commonResourceMetrics: commonResourceMetrics{orig: ms.orig}}
}

func (ms MutableResourceMetrics) AsImmutable() ResourceMetrics {
	return ResourceMetrics{commonResourceMetrics{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableResourceMetrics) MoveTo(dest MutableResourceMetrics) {
	*dest.orig = *ms.orig
	*ms.orig = otlpmetrics.ResourceMetrics{}
}

// Resource returns the resource associated with this ResourceMetrics.
func (ms ResourceMetrics) Resource() pcommon.Resource {
	return internal.NewResourceFromOrig(&ms.orig.Resource)
}

// Resource returns the resource associated with this ResourceMetrics.
func (ms MutableResourceMetrics) Resource() pcommon.MutableResource {
	return internal.NewMutableResourceFromOrig(&ms.orig.Resource)
}

// SchemaUrl returns the schemaurl associated with this ResourceMetrics.
func (ms commonResourceMetrics) SchemaUrl() string {
	return ms.orig.SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ResourceMetrics.
func (ms MutableResourceMetrics) SetSchemaUrl(v string) {
	ms.orig.SchemaUrl = v
}

// ScopeMetrics returns the ScopeMetrics associated with this ResourceMetrics.
func (ms ResourceMetrics) ScopeMetrics() ScopeMetricsSlice {
	return newScopeMetricsSliceFromOrig(&ms.orig.ScopeMetrics)
}

func (ms MutableResourceMetrics) ScopeMetrics() MutableScopeMetricsSlice {
	return newMutableScopeMetricsSliceFromOrig(&ms.orig.ScopeMetrics)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonResourceMetrics) CopyTo(dest MutableResourceMetrics) {
	ResourceMetrics{ms}.Resource().CopyTo(dest.Resource())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ResourceMetrics{ms}.ScopeMetrics().CopyTo(dest.ScopeMetrics())
}

func generateTestResourceMetrics() MutableResourceMetrics {
	tv := NewMutableResourceMetrics()
	fillTestResourceMetrics(tv)
	return tv
}

func fillTestResourceMetrics(tv MutableResourceMetrics) {
	internal.FillTestResource(internal.NewMutableResourceFromOrig(&tv.orig.Resource))
	tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestScopeMetricsSlice(newMutableScopeMetricsSliceFromOrig(&tv.orig.ScopeMetrics))
}
