// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "model/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "go run model/internal/cmd/pdatagen/main.go".

package internal

// ByteSlice represents a []byte slice that cannot be mutated.
// The instance of ByteSlice can be assigned to multiple objects since it's immutable.
type ByteSlice struct {
	value []byte
}

// NewByteSlice creates a new ByteSlice with the provided length.
func NewByteSlice(len int) ByteSlice {
	is := ByteSlice{}
	is.value = make([]byte, len)
	return is
}

// NewByteSliceFromRaw creates a new ByteSlice by copying the provided []byte slice.
func NewByteSliceFromRaw(val []byte) ByteSlice {
	is := ByteSlice{}
	if len(val) != 0 {
		is.value = make([]byte, len(val))
		copy(is.value, val)
	}
	return is
}

// AsRaw returns a copy of the []byte slice.
func (is ByteSlice) AsRaw() []byte {
	if len(is.value) == 0 {
		return nil
	}
	val := make([]byte, len(is.value))
	copy(val, is.value)
	return val
}

// Len returns length of the []byte slice value.
func (is ByteSlice) Len() int {
	return len(is.value)
}

// At returns an item from particular index.
func (is ByteSlice) At(i int) byte {
	return is.value[i]
}

// At returns an item from particular index.
func (is ByteSlice) SetAt(i int, val byte) {
	is.value[i] = val
}

// Float64Slice represents a []float64 slice that cannot be mutated.
// The instance of Float64Slice can be assigned to multiple objects since it's immutable.
type Float64Slice struct {
	value []float64
}

// NewFloat64Slice creates a new Float64Slice with the provided length.
func NewFloat64Slice(len int) Float64Slice {
	is := Float64Slice{}
	is.value = make([]float64, len)
	return is
}

// NewFloat64SliceFromRaw creates a new Float64Slice by copying the provided []float64 slice.
func NewFloat64SliceFromRaw(val []float64) Float64Slice {
	is := Float64Slice{}
	if len(val) != 0 {
		is.value = make([]float64, len(val))
		copy(is.value, val)
	}
	return is
}

// AsRaw returns a copy of the []float64 slice.
func (is Float64Slice) AsRaw() []float64 {
	if len(is.value) == 0 {
		return nil
	}
	val := make([]float64, len(is.value))
	copy(val, is.value)
	return val
}

// Len returns length of the []float64 slice value.
func (is Float64Slice) Len() int {
	return len(is.value)
}

// At returns an item from particular index.
func (is Float64Slice) At(i int) float64 {
	return is.value[i]
}

// At returns an item from particular index.
func (is Float64Slice) SetAt(i int, val float64) {
	is.value[i] = val
}

// UInt64Slice represents a []uint64 slice that cannot be mutated.
// The instance of UInt64Slice can be assigned to multiple objects since it's immutable.
type UInt64Slice struct {
	value []uint64
}

// NewUInt64Slice creates a new UInt64Slice with the provided length.
func NewUInt64Slice(len int) UInt64Slice {
	is := UInt64Slice{}
	is.value = make([]uint64, len)
	return is
}

// NewUInt64SliceFromRaw creates a new UInt64Slice by copying the provided []uint64 slice.
func NewUInt64SliceFromRaw(val []uint64) UInt64Slice {
	is := UInt64Slice{}
	if len(val) != 0 {
		is.value = make([]uint64, len(val))
		copy(is.value, val)
	}
	return is
}

// AsRaw returns a copy of the []uint64 slice.
func (is UInt64Slice) AsRaw() []uint64 {
	if len(is.value) == 0 {
		return nil
	}
	val := make([]uint64, len(is.value))
	copy(val, is.value)
	return val
}

// Len returns length of the []uint64 slice value.
func (is UInt64Slice) Len() int {
	return len(is.value)
}

// At returns an item from particular index.
func (is UInt64Slice) At(i int) uint64 {
	return is.value[i]
}

// At returns an item from particular index.
func (is UInt64Slice) SetAt(i int, val uint64) {
	is.value[i] = val
}
