// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

// ByteSlice represents a []byte slice.
// The instance of ByteSlice can be assigned to multiple objects since it's immutable.
//
// Must use NewMutableByteSlice function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ByteSlice struct {
	commonByteSlice
}

type MutableByteSlice struct {
	commonByteSlice
	preventConversion struct{} // nolint:unused
}

type commonByteSlice struct {
	orig *[]byte
}

// nolint:unused
func (es ByteSlice) asMutable() MutableByteSlice {
	return MutableByteSlice{commonByteSlice: commonByteSlice{orig: es.orig}}
}

func (es MutableByteSlice) AsImmutable() ByteSlice {
	return ByteSlice{commonByteSlice{orig: es.orig}}
}

func NewByteSliceFromOrig(orig *[]byte) ByteSlice {
	return ByteSlice{commonByteSlice{orig}}
}

func NewMutableByteSliceFromOrig(orig *[]byte) MutableByteSlice {
	return MutableByteSlice{commonByteSlice: commonByteSlice{orig}}
}

// NewMutableByteSlice creates a new empty ByteSlice.
func NewMutableByteSlice() MutableByteSlice {
	orig := []byte(nil)
	return MutableByteSlice{commonByteSlice: commonByteSlice{&orig}}
}

// AsRaw returns a copy of the []byte slice.
func (ms commonByteSlice) AsRaw() []byte {
	return copyByteSlice(nil, *ms.orig)
}

// FromRaw copies raw []byte into the slice ByteSlice.
func (ms MutableByteSlice) FromRaw(val []byte) {
	*ms.orig = copyByteSlice(*ms.orig, val)
}

// Len returns length of the []byte slice value.
// Equivalent of len(byteSlice).
func (ms commonByteSlice) Len() int {
	return len(*ms.orig)
}

// At returns an item from particular index.
// Equivalent of byteSlice[i].
func (ms commonByteSlice) At(i int) byte {
	return (*ms.orig)[i]
}

// SetAt sets byte item at particular index.
// Equivalent of byteSlice[i] = val
func (ms MutableByteSlice) SetAt(i int, val byte) {
	(*ms.orig)[i] = val
}

// EnsureCapacity ensures ByteSlice has at least the specified capacity.
//  1. If the newCap <= cap, then is no change in capacity.
//  2. If the newCap > cap, then the slice capacity will be expanded to the provided value which will be equivalent of:
//     buf := make([]byte, len(byteSlice), newCap)
//     copy(buf, byteSlice)
//     byteSlice = buf
func (ms MutableByteSlice) EnsureCapacity(newCap int) {
	oldCap := cap(*ms.orig)
	if newCap <= oldCap {
		return
	}

	newOrig := make([]byte, len(*ms.orig), newCap)
	copy(newOrig, *ms.orig)
	*ms.orig = newOrig
}

// Append appends extra elements to ByteSlice.
// Equivalent of byteSlice = append(byteSlice, elms...)
func (ms MutableByteSlice) Append(elms ...byte) {
	*ms.orig = append(*ms.orig, elms...)
}

// MoveTo moves all elements from the current slice overriding the destination and
// resetting the current instance to its zero value.
func (ms MutableByteSlice) MoveTo(dest MutableByteSlice) {
	*dest.orig = *ms.orig
	*ms.orig = nil
}

// CopyTo copies all elements from the current slice overriding the destination.
func (ms commonByteSlice) CopyTo(dest MutableByteSlice) {
	*dest.orig = copyByteSlice(*dest.orig, *ms.orig)
}

func copyByteSlice(dst, src []byte) []byte {
	dst = dst[:0]
	return append(dst, src...)
}
