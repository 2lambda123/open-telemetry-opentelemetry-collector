// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

// ByteSlice represents a []byte slice.
type ByteSlice interface {
	AsRaw() []byte
	Len() int
	At(i int) byte
	CopyTo(dest MutableByteSlice)
	getOrig() *[]byte
}

type MutableByteSlice interface {
	ByteSlice
	FromRaw(val []byte)
	SetAt(i int, val byte)
	EnsureCapacity(newCap int)
	Append(elms ...byte)
	MoveTo(dest MutableByteSlice)
}

type internalByteSlice struct {
	orig *[]byte
}

func NewImmutableByteSlice(orig *[]byte) ByteSlice {
	return internalByteSlice{orig}
}

func NewMutableByteSlice(orig *[]byte) MutableByteSlice {
	return internalByteSlice{orig}
}

func (ms internalByteSlice) getOrig() *[]byte {
	return ms.orig
}

// NewByteSlice creates a new empty ByteSlice.
func NewByteSlice() MutableByteSlice {
	orig := []byte(nil)
	return internalByteSlice{&orig}
}

// AsRaw returns a copy of the []byte slice.
func (ms internalByteSlice) AsRaw() []byte {
	return copyByteSlice(nil, *ms.getOrig())
}

// FromRaw copies raw []byte into the slice ByteSlice.
func (ms internalByteSlice) FromRaw(val []byte) {
	*ms.getOrig() = copyByteSlice(*ms.getOrig(), val)
}

// Len returns length of the []byte slice value.
// Equivalent of len(byteSlice).
func (ms internalByteSlice) Len() int {
	return len(*ms.getOrig())
}

// At returns an item from particular index.
// Equivalent of byteSlice[i].
func (ms internalByteSlice) At(i int) byte {
	return (*ms.getOrig())[i]
}

// SetAt sets byte item at particular index.
// Equivalent of byteSlice[i] = val
func (ms internalByteSlice) SetAt(i int, val byte) {
	(*ms.getOrig())[i] = val
}

// EnsureCapacity ensures ByteSlice has at least the specified capacity.
//  1. If the newCap <= cap, then is no change in capacity.
//  2. If the newCap > cap, then the slice capacity will be expanded to the provided value which will be equivalent of:
//     buf := make([]byte, len(byteSlice), newCap)
//     copy(buf, byteSlice)
//     byteSlice = buf
func (ms internalByteSlice) EnsureCapacity(newCap int) {
	oldCap := cap(*ms.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]byte, len(*ms.getOrig()), newCap)
	copy(newOrig, *ms.getOrig())
	*ms.getOrig() = newOrig
}

// Append appends extra elements to ByteSlice.
// Equivalent of byteSlice = append(byteSlice, elms...)
func (ms internalByteSlice) Append(elms ...byte) {
	*ms.getOrig() = append(*ms.getOrig(), elms...)
}

// MoveTo moves all elements from the current slice overriding the destination and
// resetting the current instance to its zero value.
func (ms internalByteSlice) MoveTo(dest MutableByteSlice) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = nil
}

// CopyTo copies all elements from the current slice overriding the destination.
func (ms internalByteSlice) CopyTo(dest MutableByteSlice) {
	*dest.getOrig() = copyByteSlice(*dest.(internalByteSlice).getOrig(), *ms.getOrig())
}

func copyByteSlice(dst, src []byte) []byte {
	dst = dst[:0]
	return append(dst, src...)
}
