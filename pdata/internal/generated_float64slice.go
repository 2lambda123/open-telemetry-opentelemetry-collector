// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

// Float64Slice represents a []float64 slice.
type Float64Slice interface {
	AsRaw() []float64
	Len() int
	At(i int) float64
	CopyTo(dest MutableFloat64Slice)
	getOrig() *[]float64
}

type MutableFloat64Slice interface {
	Float64Slice
	FromRaw(val []float64)
	SetAt(i int, val float64)
	EnsureCapacity(newCap int)
	Append(elms ...float64)
	MoveTo(dest MutableFloat64Slice)
}

type internalFloat64Slice struct {
	orig *[]float64
}

func NewImmutableFloat64Slice(orig *[]float64) Float64Slice {
	return internalFloat64Slice{orig}
}

func NewMutableFloat64Slice(orig *[]float64) MutableFloat64Slice {
	return internalFloat64Slice{orig}
}

func (ms internalFloat64Slice) getOrig() *[]float64 {
	return ms.orig
}

// NewFloat64Slice creates a new empty Float64Slice.
func NewFloat64Slice() MutableFloat64Slice {
	orig := []float64(nil)
	return internalFloat64Slice{&orig}
}

// AsRaw returns a copy of the []float64 slice.
func (ms internalFloat64Slice) AsRaw() []float64 {
	return copyFloat64Slice(nil, *ms.getOrig())
}

// FromRaw copies raw []float64 into the slice Float64Slice.
func (ms internalFloat64Slice) FromRaw(val []float64) {
	*ms.getOrig() = copyFloat64Slice(*ms.getOrig(), val)
}

// Len returns length of the []float64 slice value.
// Equivalent of len(float64Slice).
func (ms internalFloat64Slice) Len() int {
	return len(*ms.getOrig())
}

// At returns an item from particular index.
// Equivalent of float64Slice[i].
func (ms internalFloat64Slice) At(i int) float64 {
	return (*ms.getOrig())[i]
}

// SetAt sets float64 item at particular index.
// Equivalent of float64Slice[i] = val
func (ms internalFloat64Slice) SetAt(i int, val float64) {
	(*ms.getOrig())[i] = val
}

// EnsureCapacity ensures Float64Slice has at least the specified capacity.
//  1. If the newCap <= cap, then is no change in capacity.
//  2. If the newCap > cap, then the slice capacity will be expanded to the provided value which will be equivalent of:
//     buf := make([]float64, len(float64Slice), newCap)
//     copy(buf, float64Slice)
//     float64Slice = buf
func (ms internalFloat64Slice) EnsureCapacity(newCap int) {
	oldCap := cap(*ms.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]float64, len(*ms.getOrig()), newCap)
	copy(newOrig, *ms.getOrig())
	*ms.getOrig() = newOrig
}

// Append appends extra elements to Float64Slice.
// Equivalent of float64Slice = append(float64Slice, elms...)
func (ms internalFloat64Slice) Append(elms ...float64) {
	*ms.getOrig() = append(*ms.getOrig(), elms...)
}

// MoveTo moves all elements from the current slice overriding the destination and
// resetting the current instance to its zero value.
func (ms internalFloat64Slice) MoveTo(dest MutableFloat64Slice) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = nil
}

// CopyTo copies all elements from the current slice overriding the destination.
func (ms internalFloat64Slice) CopyTo(dest MutableFloat64Slice) {
	*dest.getOrig() = copyFloat64Slice(*dest.(internalFloat64Slice).getOrig(), *ms.getOrig())
}

func copyFloat64Slice(dst, src []float64) []float64 {
	dst = dst[:0]
	return append(dst, src...)
}
