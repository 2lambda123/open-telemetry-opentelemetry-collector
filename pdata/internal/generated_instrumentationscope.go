// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
)

// InstrumentationScope is a message representing the instrumentation scope information.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableInstrumentationScope function to create new instances.
// Important: zero-initialized instance is not valid for use.
type InstrumentationScope struct {
	commonInstrumentationScope
}

type MutableInstrumentationScope struct {
	commonInstrumentationScope
	preventConversion struct{} // nolint:unused
}

type commonInstrumentationScope struct {
	orig *otlpcommon.InstrumentationScope
}

func NewInstrumentationScopeFromOrig(orig *otlpcommon.InstrumentationScope) InstrumentationScope {
	return InstrumentationScope{commonInstrumentationScope{orig}}
}

func NewMutableInstrumentationScopeFromOrig(orig *otlpcommon.InstrumentationScope) MutableInstrumentationScope {
	return MutableInstrumentationScope{commonInstrumentationScope: commonInstrumentationScope{orig}}
}

// NewMutableInstrumentationScope creates a new empty InstrumentationScope.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableInstrumentationScope() MutableInstrumentationScope {
	return NewMutableInstrumentationScopeFromOrig(&otlpcommon.InstrumentationScope{})
}

// nolint:unused
func (ms InstrumentationScope) asMutable() MutableInstrumentationScope {
	return MutableInstrumentationScope{commonInstrumentationScope: commonInstrumentationScope{orig: ms.orig}}
}

func (ms MutableInstrumentationScope) AsImmutable() InstrumentationScope {
	return InstrumentationScope{commonInstrumentationScope{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableInstrumentationScope) MoveTo(dest MutableInstrumentationScope) {
	*dest.orig = *ms.orig
	*ms.orig = otlpcommon.InstrumentationScope{}
}

// Name returns the name associated with this InstrumentationScope.
func (ms commonInstrumentationScope) Name() string {
	return ms.orig.Name
}

// SetName replaces the name associated with this InstrumentationScope.
func (ms MutableInstrumentationScope) SetName(v string) {
	ms.orig.Name = v
}

// Version returns the version associated with this InstrumentationScope.
func (ms commonInstrumentationScope) Version() string {
	return ms.orig.Version
}

// SetVersion replaces the version associated with this InstrumentationScope.
func (ms MutableInstrumentationScope) SetVersion(v string) {
	ms.orig.Version = v
}

// Attributes returns the Attributes associated with this InstrumentationScope.
func (ms InstrumentationScope) Attributes() Map {
	return NewMapFromOrig(&ms.orig.Attributes)
}

func (ms MutableInstrumentationScope) Attributes() MutableMap {
	return NewMutableMapFromOrig(&ms.orig.Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this InstrumentationScope.
func (ms commonInstrumentationScope) DroppedAttributesCount() uint32 {
	return ms.orig.DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this InstrumentationScope.
func (ms MutableInstrumentationScope) SetDroppedAttributesCount(v uint32) {
	ms.orig.DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonInstrumentationScope) CopyTo(dest MutableInstrumentationScope) {
	dest.SetName(ms.Name())
	dest.SetVersion(ms.Version())
	InstrumentationScope{ms}.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func GenerateTestInstrumentationScope() MutableInstrumentationScope {
	tv := NewMutableInstrumentationScope()
	FillTestInstrumentationScope(tv)
	return tv
}

func FillTestInstrumentationScope(tv MutableInstrumentationScope) {
	tv.orig.Name = "test_name"
	tv.orig.Version = "test_version"
	FillTestMap(NewMutableMapFromOrig(&tv.orig.Attributes))
	tv.orig.DroppedAttributesCount = uint32(17)
}
