// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
)

// InstrumentationScope is a message representing the instrumentation scope information.
type InstrumentationScope interface {
	commonInstrumentationScope
	Attributes() Map
}

type MutableInstrumentationScope interface {
	commonInstrumentationScope
	MoveTo(dest MutableInstrumentationScope)
	SetName(string)
	SetVersion(string)
	Attributes() MutableMap
	SetDroppedAttributesCount(uint32)
}

type commonInstrumentationScope interface {
	getOrig() *otlpcommon.InstrumentationScope
	CopyTo(dest MutableInstrumentationScope)
	Name() string
	Version() string
	DroppedAttributesCount() uint32
}

type immutableInstrumentationScope struct {
	orig *otlpcommon.InstrumentationScope
}

type mutableInstrumentationScope struct {
	immutableInstrumentationScope
}

func NewImmutableInstrumentationScope(orig *otlpcommon.InstrumentationScope) immutableInstrumentationScope {
	return immutableInstrumentationScope{orig}
}

func NewMutableInstrumentationScope(orig *otlpcommon.InstrumentationScope) mutableInstrumentationScope {
	return mutableInstrumentationScope{immutableInstrumentationScope{orig}}
}

func (ms immutableInstrumentationScope) getOrig() *otlpcommon.InstrumentationScope {
	return ms.orig
}

// NewInstrumentationScope creates a new empty InstrumentationScope.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewInstrumentationScope() MutableInstrumentationScope {
	return NewMutableInstrumentationScope(&otlpcommon.InstrumentationScope{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableInstrumentationScope) MoveTo(dest MutableInstrumentationScope) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpcommon.InstrumentationScope{}
}

// Name returns the name associated with this InstrumentationScope.
func (ms immutableInstrumentationScope) Name() string {
	return ms.getOrig().Name
}

// SetName replaces the name associated with this InstrumentationScope.
func (ms mutableInstrumentationScope) SetName(v string) {
	ms.getOrig().Name = v
}

// Version returns the version associated with this InstrumentationScope.
func (ms immutableInstrumentationScope) Version() string {
	return ms.getOrig().Version
}

// SetVersion replaces the version associated with this InstrumentationScope.
func (ms mutableInstrumentationScope) SetVersion(v string) {
	ms.getOrig().Version = v
}

// Attributes returns the Attributes associated with this InstrumentationScope.
func (ms immutableInstrumentationScope) Attributes() Map {
	return NewImmutableMap(&ms.getOrig().Attributes)
}

func (ms mutableInstrumentationScope) Attributes() MutableMap {
	return NewMutableMap(&ms.getOrig().Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this InstrumentationScope.
func (ms immutableInstrumentationScope) DroppedAttributesCount() uint32 {
	return ms.getOrig().DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this InstrumentationScope.
func (ms mutableInstrumentationScope) SetDroppedAttributesCount(v uint32) {
	ms.getOrig().DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableInstrumentationScope) CopyTo(dest MutableInstrumentationScope) {
	dest.SetName(ms.Name())
	dest.SetVersion(ms.Version())
	ms.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func GenerateTestInstrumentationScope() MutableInstrumentationScope {
	tv := NewInstrumentationScope()
	FillTestInstrumentationScope(tv)
	return tv
}

func FillTestInstrumentationScope(tv MutableInstrumentationScope) {
	tv.getOrig().Name = "test_name"
	tv.getOrig().Version = "test_version"
	FillTestMap(NewMutableMap(&tv.getOrig().Attributes))
	tv.getOrig().DroppedAttributesCount = uint32(17)
}
