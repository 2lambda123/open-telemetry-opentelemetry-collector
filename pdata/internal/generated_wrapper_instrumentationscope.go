// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
)

type InstrumentationScope struct {
	parent Parent[*otlpcommon.InstrumentationScope]
}

type stubInstrumentationScopeParent struct {
	orig *otlpcommon.InstrumentationScope
}

func (vp stubInstrumentationScopeParent) EnsureMutability() {}

func (vp stubInstrumentationScopeParent) GetChildOrig() *otlpcommon.InstrumentationScope {
	return vp.orig
}

var _ Parent[*otlpcommon.InstrumentationScope] = (*stubInstrumentationScopeParent)(nil)

func (ms InstrumentationScope) GetOrig() *otlpcommon.InstrumentationScope {
	return ms.parent.GetChildOrig()
}

func (ms InstrumentationScope) EnsureMutability() {
	ms.parent.EnsureMutability()
}

func NewInstrumentationScopeFromOrig(orig *otlpcommon.InstrumentationScope) InstrumentationScope {
	return InstrumentationScope{parent: &stubInstrumentationScopeParent{orig: orig}}
}

func NewInstrumentationScopeFromParent(parent Parent[*otlpcommon.InstrumentationScope]) InstrumentationScope {
	return InstrumentationScope{parent: parent}
}

type WrappedInstrumentationScopeAttributes struct {
	InstrumentationScope
}

func (es WrappedInstrumentationScopeAttributes) GetChildOrig() *[]otlpcommon.KeyValue {
	return &es.GetOrig().Attributes
}

func GenerateTestInstrumentationScope() InstrumentationScope {
	tv := NewInstrumentationScopeFromOrig(&otlpcommon.InstrumentationScope{})
	FillTestInstrumentationScope(tv)
	return tv
}

func FillTestInstrumentationScope(tv InstrumentationScope) {
	tv.GetOrig().Name = "test_name"
	tv.GetOrig().Version = "test_version"
	FillTestMap(NewMapFromParent(WrappedInstrumentationScopeAttributes{InstrumentationScope: tv}))
	tv.GetOrig().DroppedAttributesCount = uint32(17)
}
