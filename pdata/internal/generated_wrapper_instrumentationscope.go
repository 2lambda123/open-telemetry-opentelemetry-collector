// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
)

type InstrumentationScope struct {
	*pInstrumentationScope
}

type pInstrumentationScope struct {
	orig   *otlpcommon.InstrumentationScope
	state  *State
	parent Parent[*otlpcommon.InstrumentationScope]
}

func (ms InstrumentationScope) GetOrig() *otlpcommon.InstrumentationScope {
	if *ms.state == StateDirty {
		ms.orig, ms.state = ms.parent.RefreshOrigState()
	}
	return ms.orig
}

func (ms InstrumentationScope) EnsureMutability() {
	if *ms.state == StateShared {
		ms.parent.EnsureMutability()
	}
}

func (ms InstrumentationScope) GetState() *State {
	return ms.state
}

func NewInstrumentationScope(orig *otlpcommon.InstrumentationScope, parent Parent[*otlpcommon.InstrumentationScope]) InstrumentationScope {
	if parent == nil {
		state := StateExclusive
		return InstrumentationScope{&pInstrumentationScope{orig: orig, state: &state}}
	}
	return InstrumentationScope{&pInstrumentationScope{orig: orig, state: parent.GetState(), parent: parent}}
}

type WrappedInstrumentationScopeAttributes struct {
	InstrumentationScope
}

func (es WrappedInstrumentationScopeAttributes) RefreshOrigState() (*[]otlpcommon.KeyValue, *State) {
	return &es.GetOrig().Attributes, es.GetState()
}

func GenerateTestInstrumentationScope() InstrumentationScope {
	orig := otlpcommon.InstrumentationScope{}
	tv := NewInstrumentationScope(&orig, nil)
	FillTestInstrumentationScope(tv)
	return tv
}

func FillTestInstrumentationScope(tv InstrumentationScope) {
	tv.GetOrig().Name = "test_name"
	tv.GetOrig().Version = "test_version"
	FillTestMap(NewMap(&tv.GetOrig().Attributes, WrappedInstrumentationScopeAttributes{InstrumentationScope: tv}))
	tv.GetOrig().DroppedAttributesCount = uint32(17)
}
