// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
)

// Resource is a message representing the resource information.
type Resource interface {
	commonResource
	Attributes() Map
}

type MutableResource interface {
	commonResource
	MoveTo(dest MutableResource)
	Attributes() MutableMap
	SetDroppedAttributesCount(uint32)
}

type commonResource interface {
	getOrig() *otlpresource.Resource
	CopyTo(dest MutableResource)
	DroppedAttributesCount() uint32
}

type immutableResource struct {
	orig *otlpresource.Resource
}

type mutableResource struct {
	immutableResource
}

func NewImmutableResource(orig *otlpresource.Resource) immutableResource {
	return immutableResource{orig}
}

func NewMutableResource(orig *otlpresource.Resource) mutableResource {
	return mutableResource{immutableResource{orig}}
}

func (ms immutableResource) getOrig() *otlpresource.Resource {
	return ms.orig
}

// NewResource creates a new empty Resource.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewResource() MutableResource {
	return NewMutableResource(&otlpresource.Resource{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableResource) MoveTo(dest MutableResource) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlpresource.Resource{}
}

// Attributes returns the Attributes associated with this Resource.
func (ms immutableResource) Attributes() Map {
	return NewImmutableMap(&ms.getOrig().Attributes)
}

func (ms mutableResource) Attributes() MutableMap {
	return NewMutableMap(&ms.getOrig().Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this Resource.
func (ms immutableResource) DroppedAttributesCount() uint32 {
	return ms.getOrig().DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this Resource.
func (ms mutableResource) SetDroppedAttributesCount(v uint32) {
	ms.getOrig().DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableResource) CopyTo(dest MutableResource) {
	ms.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func GenerateTestResource() MutableResource {
	tv := NewResource()
	FillTestResource(tv)
	return tv
}

func FillTestResource(tv MutableResource) {
	FillTestMap(NewMutableMap(&tv.getOrig().Attributes))
	tv.getOrig().DroppedAttributesCount = uint32(17)
}
