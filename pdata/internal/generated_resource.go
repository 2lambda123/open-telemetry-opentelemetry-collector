// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
)

// Resource is a message representing the resource information.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableResource function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Resource struct {
	commonResource
}

type MutableResource struct {
	commonResource
	preventConversion struct{} // nolint:unused
}

type commonResource struct {
	orig *otlpresource.Resource
}

func NewResourceFromOrig(orig *otlpresource.Resource) Resource {
	return Resource{commonResource{orig}}
}

func NewMutableResourceFromOrig(orig *otlpresource.Resource) MutableResource {
	return MutableResource{commonResource: commonResource{orig}}
}

// NewMutableResource creates a new empty Resource.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableResource() MutableResource {
	return NewMutableResourceFromOrig(&otlpresource.Resource{})
}

// nolint:unused
func (ms Resource) asMutable() MutableResource {
	return MutableResource{commonResource: commonResource{orig: ms.orig}}
}

func (ms MutableResource) AsImmutable() Resource {
	return Resource{commonResource{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableResource) MoveTo(dest MutableResource) {
	*dest.orig = *ms.orig
	*ms.orig = otlpresource.Resource{}
}

// Attributes returns the Attributes associated with this Resource.
func (ms Resource) Attributes() Map {
	return NewMapFromOrig(&ms.orig.Attributes)
}

func (ms MutableResource) Attributes() MutableMap {
	return NewMutableMapFromOrig(&ms.orig.Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this Resource.
func (ms commonResource) DroppedAttributesCount() uint32 {
	return ms.orig.DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this Resource.
func (ms MutableResource) SetDroppedAttributesCount(v uint32) {
	ms.orig.DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonResource) CopyTo(dest MutableResource) {
	Resource{ms}.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func GenerateTestResource() MutableResource {
	tv := NewMutableResource()
	FillTestResource(tv)
	return tv
}

func FillTestResource(tv MutableResource) {
	FillTestMap(NewMutableMapFromOrig(&tv.orig.Attributes))
	tv.orig.DroppedAttributesCount = uint32(17)
}
