// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package plog

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceLogs is a collection of logs from a Resource.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewResourceLogs function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ResourceLogs struct {
	parent ResourceLogsSlice
	idx    int
}

func (ms ResourceLogs) getOrig() *otlplogs.ResourceLogs {
	return ms.parent.getChildOrig(ms.idx)
}

func (ms ResourceLogs) ensureMutability() {
	ms.parent.ensureMutability()
}

type wrappedResourceLogsResource struct {
	ResourceLogs
}

func (es wrappedResourceLogsResource) GetChildOrig() *otlpresource.Resource {
	return &es.getOrig().Resource
}

func (es wrappedResourceLogsResource) EnsureMutability() {
	es.ensureMutability()
}

func (ms ResourceLogs) getScopeLogsOrig() *[]*otlplogs.ScopeLogs {
	return &ms.getOrig().ScopeLogs
}

func newResourceLogsFromScopeLogsOrig(childOrig *[]*otlplogs.ScopeLogs) ResourceLogs {
	return newResourceLogsFromOrig(&otlplogs.ResourceLogs{
		ScopeLogs: *childOrig,
	})
}

func newResourceLogsFromOrig(orig *otlplogs.ResourceLogs) ResourceLogs {
	return ResourceLogs{parent: newResourceLogsSliceFromElementOrig(orig)}
}

func newResourceLogsFromParent(parent ResourceLogsSlice, idx int) ResourceLogs {
	return ResourceLogs{parent: parent, idx: idx}
}

// NewResourceLogs creates a new empty ResourceLogs.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewResourceLogs() ResourceLogs {
	return newResourceLogsFromOrig(&otlplogs.ResourceLogs{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms ResourceLogs) MoveTo(dest ResourceLogs) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlplogs.ResourceLogs{}
}

// Resource returns the resource associated with this ResourceLogs.
func (ms ResourceLogs) Resource() pcommon.Resource {
	return pcommon.Resource(internal.NewResourceFromParent(wrappedResourceLogsResource{ResourceLogs: ms}))
}

// SchemaUrl returns the schemaurl associated with this ResourceLogs.
func (ms ResourceLogs) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ResourceLogs.
func (ms ResourceLogs) SetSchemaUrl(v string) {
	ms.ensureMutability()
	ms.getOrig().SchemaUrl = v
}

// ScopeLogs returns the <no value> associated with this ResourceLogs.
func (ms ResourceLogs) ScopeLogs() ScopeLogsSlice {
	return newScopeLogsSliceFromParent(ms)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms ResourceLogs) CopyTo(dest ResourceLogs) {
	dest.ensureMutability()
	ms.Resource().CopyTo(dest.Resource())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.ScopeLogs().CopyTo(dest.ScopeLogs())
}
