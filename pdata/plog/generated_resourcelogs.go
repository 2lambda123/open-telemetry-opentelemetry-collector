// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package plog

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceLogs is a collection of logs from a Resource.
type ResourceLogs interface {
	commonResourceLogs
	Resource() pcommon.Resource
	ScopeLogs() ScopeLogsSlice
}

type MutableResourceLogs interface {
	commonResourceLogs
	MoveTo(dest MutableResourceLogs)
	Resource() pcommon.MutableResource
	SetSchemaUrl(string)
	ScopeLogs() MutableScopeLogsSlice
}

type commonResourceLogs interface {
	getOrig() *otlplogs.ResourceLogs
	CopyTo(dest MutableResourceLogs)
	SchemaUrl() string
}

type immutableResourceLogs struct {
	orig *otlplogs.ResourceLogs
}

type mutableResourceLogs struct {
	immutableResourceLogs
}

func newImmutableResourceLogs(orig *otlplogs.ResourceLogs) immutableResourceLogs {
	return immutableResourceLogs{orig}
}

func newMutableResourceLogs(orig *otlplogs.ResourceLogs) mutableResourceLogs {
	return mutableResourceLogs{immutableResourceLogs{orig}}
}

func (ms immutableResourceLogs) getOrig() *otlplogs.ResourceLogs {
	return ms.orig
}

// NewResourceLogs creates a new empty ResourceLogs.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewResourceLogs() MutableResourceLogs {
	return newMutableResourceLogs(&otlplogs.ResourceLogs{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableResourceLogs) MoveTo(dest MutableResourceLogs) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlplogs.ResourceLogs{}
}

// Resource returns the resource associated with this ResourceLogs.
func (ms immutableResourceLogs) Resource() pcommon.Resource {
	return internal.NewImmutableResource(&ms.getOrig().Resource)
}

// Resource returns the resource associated with this ResourceLogs.
func (ms mutableResourceLogs) Resource() pcommon.MutableResource {
	return internal.NewMutableResource(&ms.getOrig().Resource)
}

// SchemaUrl returns the schemaurl associated with this ResourceLogs.
func (ms immutableResourceLogs) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ResourceLogs.
func (ms mutableResourceLogs) SetSchemaUrl(v string) {
	ms.getOrig().SchemaUrl = v
}

// ScopeLogs returns the ScopeLogs associated with this ResourceLogs.
func (ms immutableResourceLogs) ScopeLogs() ScopeLogsSlice {
	return newImmutableScopeLogsSlice(&ms.getOrig().ScopeLogs)
}

func (ms mutableResourceLogs) ScopeLogs() MutableScopeLogsSlice {
	return newMutableScopeLogsSlice(&ms.getOrig().ScopeLogs)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableResourceLogs) CopyTo(dest MutableResourceLogs) {
	ms.Resource().CopyTo(dest.Resource())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.ScopeLogs().CopyTo(dest.ScopeLogs())
}

func generateTestResourceLogs() MutableResourceLogs {
	tv := NewResourceLogs()
	fillTestResourceLogs(tv)
	return tv
}

func fillTestResourceLogs(tv MutableResourceLogs) {
	internal.FillTestResource(internal.NewResource(&tv.orig.Resource))
	tv.getOrig().SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestScopeLogsSlice(newMutableScopeLogsSlice(&tv.getOrig().ScopeLogs))
}
