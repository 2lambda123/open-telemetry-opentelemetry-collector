// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package plog

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeLogs is a collection of logs from a LibraryInstrumentation.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewScopeLogs function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeLogs struct {
	*pScopeLogs
}

type pScopeLogs struct {
	orig   *otlplogs.ScopeLogs
	state  *internal.State
	parent ScopeLogsSlice
	idx    int
}

func (ms ScopeLogs) getOrig() *otlplogs.ScopeLogs {
	if *ms.state == internal.StateDirty {
		ms.orig, ms.state = ms.parent.refreshElementOrigState(ms.idx)
	}
	return ms.orig
}

func (ms ScopeLogs) ensureMutability() {
	if *ms.state == internal.StateShared {
		ms.parent.ensureMutability()
	}
}

func (ms ScopeLogs) getState() *internal.State {
	return ms.state
}

type wrappedScopeLogsScope struct {
	ScopeLogs
}

func (es wrappedScopeLogsScope) RefreshOrigState() (*otlpcommon.InstrumentationScope, *internal.State) {
	return &es.getOrig().Scope, es.getState()
}

func (es wrappedScopeLogsScope) EnsureMutability() {
	es.ensureMutability()
}

func (es wrappedScopeLogsScope) GetState() *internal.State {
	return es.getState()
}

func (ms ScopeLogs) getLogRecordsOrig() *[]*otlplogs.LogRecord {
	return &ms.getOrig().LogRecords
}

func newScopeLogsFromLogRecordsOrig(childOrig *[]*otlplogs.LogRecord) ScopeLogs {
	state := internal.StateExclusive
	return ScopeLogs{&pScopeLogs{
		state: &state,
		orig: &otlplogs.ScopeLogs{
			LogRecords: *childOrig,
		},
	}}
}

func newScopeLogs(orig *otlplogs.ScopeLogs, parent ScopeLogsSlice, idx int) ScopeLogs {
	return ScopeLogs{&pScopeLogs{
		orig:   orig,
		state:  parent.getState(),
		parent: parent,
		idx:    idx,
	}}
}

// NewScopeLogs creates a new empty ScopeLogs.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewScopeLogs() ScopeLogs {
	state := internal.StateExclusive
	return ScopeLogs{&pScopeLogs{orig: &otlplogs.ScopeLogs{}, state: &state}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms ScopeLogs) MoveTo(dest ScopeLogs) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlplogs.ScopeLogs{}
}

// Scope returns the scope associated with this ScopeLogs.
func (ms ScopeLogs) Scope() pcommon.InstrumentationScope {
	return pcommon.InstrumentationScope(internal.NewInstrumentationScope(&ms.getOrig().Scope, wrappedScopeLogsScope{ScopeLogs: ms}))
}

// SchemaUrl returns the schemaurl associated with this ScopeLogs.
func (ms ScopeLogs) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeLogs.
func (ms ScopeLogs) SetSchemaUrl(v string) {
	ms.ensureMutability()
	ms.getOrig().SchemaUrl = v
}

// LogRecords returns the <no value> associated with this ScopeLogs.
func (ms ScopeLogs) LogRecords() LogRecordSlice {
	return newLogRecordSliceFromParent(ms)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms ScopeLogs) CopyTo(dest ScopeLogs) {
	dest.ensureMutability()
	ms.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.LogRecords().CopyTo(dest.LogRecords())
}
