// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package plog

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeLogs is a collection of logs from a LibraryInstrumentation.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableScopeLogs function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeLogs struct {
	commonScopeLogs
}

type MutableScopeLogs struct {
	commonScopeLogs
	preventConversion struct{} // nolint:unused
}

type commonScopeLogs struct {
	orig *otlplogs.ScopeLogs
}

func newScopeLogsFromOrig(orig *otlplogs.ScopeLogs) ScopeLogs {
	return ScopeLogs{commonScopeLogs{orig}}
}

func newMutableScopeLogsFromOrig(orig *otlplogs.ScopeLogs) MutableScopeLogs {
	return MutableScopeLogs{commonScopeLogs: commonScopeLogs{orig}}
}

// NewMutableScopeLogs creates a new empty ScopeLogs.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableScopeLogs() MutableScopeLogs {
	return newMutableScopeLogsFromOrig(&otlplogs.ScopeLogs{})
}

// nolint:unused
func (ms ScopeLogs) asMutable() MutableScopeLogs {
	return MutableScopeLogs{commonScopeLogs: commonScopeLogs{orig: ms.orig}}
}

func (ms MutableScopeLogs) AsImmutable() ScopeLogs {
	return ScopeLogs{commonScopeLogs{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableScopeLogs) MoveTo(dest MutableScopeLogs) {
	*dest.orig = *ms.orig
	*ms.orig = otlplogs.ScopeLogs{}
}

// Scope returns the scope associated with this ScopeLogs.
func (ms ScopeLogs) Scope() pcommon.InstrumentationScope {
	return internal.NewInstrumentationScopeFromOrig(&ms.orig.Scope)
}

// Scope returns the scope associated with this ScopeLogs.
func (ms MutableScopeLogs) Scope() pcommon.MutableInstrumentationScope {
	return internal.NewMutableInstrumentationScopeFromOrig(&ms.orig.Scope)
}

// SchemaUrl returns the schemaurl associated with this ScopeLogs.
func (ms commonScopeLogs) SchemaUrl() string {
	return ms.orig.SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeLogs.
func (ms MutableScopeLogs) SetSchemaUrl(v string) {
	ms.orig.SchemaUrl = v
}

// LogRecords returns the LogRecords associated with this ScopeLogs.
func (ms ScopeLogs) LogRecords() LogRecordSlice {
	return newLogRecordSliceFromOrig(&ms.orig.LogRecords)
}

func (ms MutableScopeLogs) LogRecords() MutableLogRecordSlice {
	return newMutableLogRecordSliceFromOrig(&ms.orig.LogRecords)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonScopeLogs) CopyTo(dest MutableScopeLogs) {
	ScopeLogs{ms}.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ScopeLogs{ms}.LogRecords().CopyTo(dest.LogRecords())
}

func generateTestScopeLogs() MutableScopeLogs {
	tv := NewMutableScopeLogs()
	fillTestScopeLogs(tv)
	return tv
}

func fillTestScopeLogs(tv MutableScopeLogs) {
	internal.FillTestInstrumentationScope(internal.NewMutableInstrumentationScopeFromOrig(&tv.orig.Scope))
	tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestLogRecordSlice(newMutableLogRecordSliceFromOrig(&tv.orig.LogRecords))
}
