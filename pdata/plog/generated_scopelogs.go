// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package plog

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeLogs is a collection of logs from a LibraryInstrumentation.
type ScopeLogs interface {
	commonScopeLogs
	Scope() pcommon.InstrumentationScope
	LogRecords() LogRecordSlice
}

type MutableScopeLogs interface {
	commonScopeLogs
	MoveTo(dest MutableScopeLogs)
	Scope() pcommon.MutableInstrumentationScope
	SetSchemaUrl(string)
	LogRecords() MutableLogRecordSlice
}

type commonScopeLogs interface {
	getOrig() *otlplogs.ScopeLogs
	CopyTo(dest MutableScopeLogs)
	SchemaUrl() string
}

type immutableScopeLogs struct {
	orig *otlplogs.ScopeLogs
}

type mutableScopeLogs struct {
	immutableScopeLogs
}

func newImmutableScopeLogs(orig *otlplogs.ScopeLogs) immutableScopeLogs {
	return immutableScopeLogs{orig}
}

func newMutableScopeLogs(orig *otlplogs.ScopeLogs) mutableScopeLogs {
	return mutableScopeLogs{immutableScopeLogs{orig}}
}

func (ms immutableScopeLogs) getOrig() *otlplogs.ScopeLogs {
	return ms.orig
}

// NewScopeLogs creates a new empty ScopeLogs.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewScopeLogs() MutableScopeLogs {
	return newMutableScopeLogs(&otlplogs.ScopeLogs{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableScopeLogs) MoveTo(dest MutableScopeLogs) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlplogs.ScopeLogs{}
}

// Scope returns the scope associated with this ScopeLogs.
func (ms immutableScopeLogs) Scope() pcommon.InstrumentationScope {
	return internal.NewImmutableInstrumentationScope(&ms.getOrig().Scope)
}

// Scope returns the scope associated with this ScopeLogs.
func (ms mutableScopeLogs) Scope() pcommon.MutableInstrumentationScope {
	return internal.NewMutableInstrumentationScope(&ms.getOrig().Scope)
}

// SchemaUrl returns the schemaurl associated with this ScopeLogs.
func (ms immutableScopeLogs) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeLogs.
func (ms mutableScopeLogs) SetSchemaUrl(v string) {
	ms.getOrig().SchemaUrl = v
}

// LogRecords returns the LogRecords associated with this ScopeLogs.
func (ms immutableScopeLogs) LogRecords() LogRecordSlice {
	return newImmutableLogRecordSlice(&ms.getOrig().LogRecords)
}

func (ms mutableScopeLogs) LogRecords() MutableLogRecordSlice {
	return newMutableLogRecordSlice(&ms.getOrig().LogRecords)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableScopeLogs) CopyTo(dest MutableScopeLogs) {
	ms.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.LogRecords().CopyTo(dest.LogRecords())
}

func generateTestScopeLogs() MutableScopeLogs {
	tv := NewScopeLogs()
	fillTestScopeLogs(tv)
	return tv
}

func fillTestScopeLogs(tv MutableScopeLogs) {
	internal.FillTestInstrumentationScope(internal.NewInstrumentationScope(&tv.orig.Scope))
	tv.getOrig().SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestLogRecordSlice(newMutableLogRecordSlice(&tv.getOrig().LogRecords))
}
