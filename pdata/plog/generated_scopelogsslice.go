// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package plog

import (
	"sort"

	"go.opentelemetry.io/collector/pdata/internal"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
)

// ScopeLogsSlice logically represents a slice of ScopeLogs.
//
// This is a reference type. If passed by value and callee modifies it, the
// caller will see the modification.
//
// Must use NewScopeLogsSlice function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeLogsSlice struct {
	parent ResourceLogs
}

func newScopeLogsSliceFromOrig(orig *[]*otlplogs.ScopeLogs) ScopeLogsSlice {
	return ScopeLogsSlice{parent: newResourceLogsFromScopeLogsOrig(orig)}
}

func newScopeLogsSliceFromParent(parent ResourceLogs) ScopeLogsSlice {
	return ScopeLogsSlice{parent: parent}
}

func (es ScopeLogsSlice) getOrig() *[]*otlplogs.ScopeLogs {
	return es.parent.getScopeLogsOrig()
}

func (es ScopeLogsSlice) ensureMutability() {
	es.parent.ensureMutability()
}

func (es ScopeLogsSlice) getState() *internal.State {
	return es.parent.getState()
}

func (es ScopeLogsSlice) refreshElementOrigState(i int) (*otlplogs.ScopeLogs, *internal.State) {
	return (*es.getOrig())[i], es.getState()
}

// NewScopeLogsSlice creates a ScopeLogsSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewScopeLogsSlice() ScopeLogsSlice {
	orig := []*otlplogs.ScopeLogs(nil)
	return newScopeLogsSliceFromOrig(&orig)
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewScopeLogsSlice()".
func (es ScopeLogsSlice) Len() int {
	return len(*es.getOrig())
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es ScopeLogsSlice) At(i int) ScopeLogs {
	return newScopeLogs((*es.getOrig())[i], es, i)
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new ScopeLogsSlice can be initialized:
//
//	es := NewScopeLogsSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es ScopeLogsSlice) EnsureCapacity(newCap int) {
	es.ensureMutability()
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]*otlplogs.ScopeLogs, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty ScopeLogs.
// It returns the newly added ScopeLogs.
func (es ScopeLogsSlice) AppendEmpty() ScopeLogs {
	es.ensureMutability()
	*es.getOrig() = append(*es.getOrig(), &otlplogs.ScopeLogs{})
	return es.At(es.Len() - 1)
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es ScopeLogsSlice) MoveAndAppendTo(dest ScopeLogsSlice) {
	es.ensureMutability()
	dest.ensureMutability()
	if *dest.getOrig() == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.getOrig() = *es.getOrig()
	} else {
		*dest.getOrig() = append(*dest.getOrig(), *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es ScopeLogsSlice) RemoveIf(f func(ScopeLogs) bool) {
	es.ensureMutability()
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	// TODO: Prevent memory leak by erasing truncated values.
	*es.getOrig() = (*es.getOrig())[:newLen]
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es ScopeLogsSlice) CopyTo(dest ScopeLogsSlice) {
	dest.ensureMutability()
	srcLen := es.Len()
	destCap := cap(*dest.getOrig())
	exclState := internal.StateExclusive
	if srcLen <= destCap {
		(*dest.getOrig()) = (*dest.getOrig())[:srcLen:destCap]
		for i := range *es.getOrig() {
			srcScopeLogs := ScopeLogs{&pScopeLogs{orig: (*es.getOrig())[i], state: &exclState}}
			destScopeLogs := ScopeLogs{&pScopeLogs{orig: (*dest.getOrig())[i],
				state: &exclState}}
			srcScopeLogs.CopyTo(destScopeLogs)
		}
		return
	}
	origs := make([]otlplogs.ScopeLogs, srcLen)
	wrappers := make([]*otlplogs.ScopeLogs, srcLen)
	for i := range *es.getOrig() {
		wrappers[i] = &origs[i]
		srcScopeLogs := ScopeLogs{&pScopeLogs{orig: (*es.getOrig())[i], state: &exclState}}
		destScopeLogs := ScopeLogs{&pScopeLogs{orig: wrappers[i], state: &exclState}}
		srcScopeLogs.CopyTo(destScopeLogs)
	}
	*dest.getOrig() = wrappers
}

// Sort sorts the ScopeLogs elements within ScopeLogsSlice given the
// provided less function so that two instances of ScopeLogsSlice
// can be compared.
func (es ScopeLogsSlice) Sort(less func(a, b ScopeLogs) bool) {
	es.ensureMutability()
	sort.SliceStable(*es.getOrig(), func(i, j int) bool { return less(es.At(i), es.At(j)) })
}
