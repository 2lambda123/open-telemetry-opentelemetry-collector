// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// SpanLink is a pointer from the current span to another span in the same trace or in a
// different trace.
// See Link definition in OTLP: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSpanLink function to create new instances.
// Important: zero-initialized instance is not valid for use.
type SpanLink struct {
	commonSpanLink
}

type MutableSpanLink struct {
	commonSpanLink
	preventConversion struct{} // nolint:unused
}

type commonSpanLink struct {
	orig *otlptrace.Span_Link
}

func newSpanLinkFromOrig(orig *otlptrace.Span_Link) SpanLink {
	return SpanLink{commonSpanLink{orig}}
}

func newMutableSpanLinkFromOrig(orig *otlptrace.Span_Link) MutableSpanLink {
	return MutableSpanLink{commonSpanLink: commonSpanLink{orig}}
}

// NewMutableSpanLink creates a new empty SpanLink.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSpanLink() MutableSpanLink {
	return newMutableSpanLinkFromOrig(&otlptrace.Span_Link{})
}

// nolint:unused
func (ms SpanLink) asMutable() MutableSpanLink {
	return MutableSpanLink{commonSpanLink: commonSpanLink{orig: ms.orig}}
}

func (ms MutableSpanLink) AsImmutable() SpanLink {
	return SpanLink{commonSpanLink{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSpanLink) MoveTo(dest MutableSpanLink) {
	*dest.orig = *ms.orig
	*ms.orig = otlptrace.Span_Link{}
}

// TraceID returns the traceid associated with this SpanLink.
func (ms commonSpanLink) TraceID() pcommon.TraceID {
	return pcommon.TraceID(ms.orig.TraceId)
}

// SetTraceID replaces the traceid associated with this SpanLink.
func (ms MutableSpanLink) SetTraceID(v pcommon.TraceID) {
	ms.orig.TraceId = data.TraceID(v)
}

// SpanID returns the spanid associated with this SpanLink.
func (ms commonSpanLink) SpanID() pcommon.SpanID {
	return pcommon.SpanID(ms.orig.SpanId)
}

// SetSpanID replaces the spanid associated with this SpanLink.
func (ms MutableSpanLink) SetSpanID(v pcommon.SpanID) {
	ms.orig.SpanId = data.SpanID(v)
}

// TraceState returns the tracestate associated with this SpanLink.
func (ms SpanLink) TraceState() pcommon.TraceState {
	return internal.NewTraceStateFromOrig(&ms.orig.TraceState)
}

// TraceState returns the tracestate associated with this SpanLink.
func (ms MutableSpanLink) TraceState() pcommon.MutableTraceState {
	return internal.NewMutableTraceStateFromOrig(&ms.orig.TraceState)
}

// Attributes returns the Attributes associated with this SpanLink.
func (ms SpanLink) Attributes() pcommon.Map {
	return internal.NewMapFromOrig(&ms.orig.Attributes)
}

func (ms MutableSpanLink) Attributes() pcommon.MutableMap {
	return internal.NewMutableMapFromOrig(&ms.orig.Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this SpanLink.
func (ms commonSpanLink) DroppedAttributesCount() uint32 {
	return ms.orig.DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this SpanLink.
func (ms MutableSpanLink) SetDroppedAttributesCount(v uint32) {
	ms.orig.DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSpanLink) CopyTo(dest MutableSpanLink) {
	dest.SetTraceID(ms.TraceID())
	dest.SetSpanID(ms.SpanID())
	SpanLink{ms}.TraceState().CopyTo(dest.TraceState())
	SpanLink{ms}.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func generateTestSpanLink() MutableSpanLink {
	tv := NewMutableSpanLink()
	fillTestSpanLink(tv)
	return tv
}

func fillTestSpanLink(tv MutableSpanLink) {
	tv.orig.TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
	tv.orig.SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	internal.FillTestTraceState(internal.NewMutableTraceStateFromOrig(&tv.orig.TraceState))
	internal.FillTestMap(internal.NewMutableMapFromOrig(&tv.orig.Attributes))
	tv.orig.DroppedAttributesCount = uint32(17)
}
