// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceSpans is a collection of spans from a Resource.
type ResourceSpans interface {
	commonResourceSpans
	Resource() pcommon.Resource
	ScopeSpans() ScopeSpansSlice
}

type MutableResourceSpans interface {
	commonResourceSpans
	MoveTo(dest MutableResourceSpans)
	Resource() pcommon.MutableResource
	SetSchemaUrl(string)
	ScopeSpans() MutableScopeSpansSlice
}

type commonResourceSpans interface {
	getOrig() *otlptrace.ResourceSpans
	CopyTo(dest MutableResourceSpans)
	SchemaUrl() string
}

type immutableResourceSpans struct {
	orig *otlptrace.ResourceSpans
}

type mutableResourceSpans struct {
	immutableResourceSpans
}

func newImmutableResourceSpans(orig *otlptrace.ResourceSpans) immutableResourceSpans {
	return immutableResourceSpans{orig}
}

func newMutableResourceSpans(orig *otlptrace.ResourceSpans) mutableResourceSpans {
	return mutableResourceSpans{immutableResourceSpans{orig}}
}

func (ms immutableResourceSpans) getOrig() *otlptrace.ResourceSpans {
	return ms.orig
}

// NewResourceSpans creates a new empty ResourceSpans.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewResourceSpans() MutableResourceSpans {
	return newMutableResourceSpans(&otlptrace.ResourceSpans{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableResourceSpans) MoveTo(dest MutableResourceSpans) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlptrace.ResourceSpans{}
}

// Resource returns the resource associated with this ResourceSpans.
func (ms immutableResourceSpans) Resource() pcommon.Resource {
	return internal.NewImmutableResource(&ms.getOrig().Resource)
}

// Resource returns the resource associated with this ResourceSpans.
func (ms mutableResourceSpans) Resource() pcommon.MutableResource {
	return internal.NewMutableResource(&ms.getOrig().Resource)
}

// SchemaUrl returns the schemaurl associated with this ResourceSpans.
func (ms immutableResourceSpans) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ResourceSpans.
func (ms mutableResourceSpans) SetSchemaUrl(v string) {
	ms.getOrig().SchemaUrl = v
}

// ScopeSpans returns the ScopeSpans associated with this ResourceSpans.
func (ms immutableResourceSpans) ScopeSpans() ScopeSpansSlice {
	return newImmutableScopeSpansSlice(&ms.getOrig().ScopeSpans)
}

func (ms mutableResourceSpans) ScopeSpans() MutableScopeSpansSlice {
	return newMutableScopeSpansSlice(&ms.getOrig().ScopeSpans)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableResourceSpans) CopyTo(dest MutableResourceSpans) {
	ms.Resource().CopyTo(dest.Resource())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.ScopeSpans().CopyTo(dest.ScopeSpans())
}

func generateTestResourceSpans() MutableResourceSpans {
	tv := NewResourceSpans()
	fillTestResourceSpans(tv)
	return tv
}

func fillTestResourceSpans(tv MutableResourceSpans) {
	internal.FillTestResource(internal.NewResource(&tv.orig.Resource))
	tv.getOrig().SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestScopeSpansSlice(newMutableScopeSpansSlice(&tv.getOrig().ScopeSpans))
}
