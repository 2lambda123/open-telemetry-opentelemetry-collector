// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceSpans is a collection of spans from a Resource.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableResourceSpans function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ResourceSpans struct {
	commonResourceSpans
}

type MutableResourceSpans struct {
	commonResourceSpans
	preventConversion struct{} // nolint:unused
}

type commonResourceSpans struct {
	orig *otlptrace.ResourceSpans
}

func newResourceSpansFromOrig(orig *otlptrace.ResourceSpans) ResourceSpans {
	return ResourceSpans{commonResourceSpans{orig}}
}

func newMutableResourceSpansFromOrig(orig *otlptrace.ResourceSpans) MutableResourceSpans {
	return MutableResourceSpans{commonResourceSpans: commonResourceSpans{orig}}
}

// NewMutableResourceSpans creates a new empty ResourceSpans.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableResourceSpans() MutableResourceSpans {
	return newMutableResourceSpansFromOrig(&otlptrace.ResourceSpans{})
}

// nolint:unused
func (ms ResourceSpans) asMutable() MutableResourceSpans {
	return MutableResourceSpans{commonResourceSpans: commonResourceSpans{orig: ms.orig}}
}

func (ms MutableResourceSpans) AsImmutable() ResourceSpans {
	return ResourceSpans{commonResourceSpans{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableResourceSpans) MoveTo(dest MutableResourceSpans) {
	*dest.orig = *ms.orig
	*ms.orig = otlptrace.ResourceSpans{}
}

// Resource returns the resource associated with this ResourceSpans.
func (ms ResourceSpans) Resource() pcommon.Resource {
	return internal.NewResourceFromOrig(&ms.orig.Resource)
}

// Resource returns the resource associated with this ResourceSpans.
func (ms MutableResourceSpans) Resource() pcommon.MutableResource {
	return internal.NewMutableResourceFromOrig(&ms.orig.Resource)
}

// SchemaUrl returns the schemaurl associated with this ResourceSpans.
func (ms commonResourceSpans) SchemaUrl() string {
	return ms.orig.SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ResourceSpans.
func (ms MutableResourceSpans) SetSchemaUrl(v string) {
	ms.orig.SchemaUrl = v
}

// ScopeSpans returns the ScopeSpans associated with this ResourceSpans.
func (ms ResourceSpans) ScopeSpans() ScopeSpansSlice {
	return newScopeSpansSliceFromOrig(&ms.orig.ScopeSpans)
}

func (ms MutableResourceSpans) ScopeSpans() MutableScopeSpansSlice {
	return newMutableScopeSpansSliceFromOrig(&ms.orig.ScopeSpans)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonResourceSpans) CopyTo(dest MutableResourceSpans) {
	ResourceSpans{ms}.Resource().CopyTo(dest.Resource())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ResourceSpans{ms}.ScopeSpans().CopyTo(dest.ScopeSpans())
}

func generateTestResourceSpans() MutableResourceSpans {
	tv := NewMutableResourceSpans()
	fillTestResourceSpans(tv)
	return tv
}

func fillTestResourceSpans(tv MutableResourceSpans) {
	internal.FillTestResource(internal.NewMutableResourceFromOrig(&tv.orig.Resource))
	tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestScopeSpansSlice(newMutableScopeSpansSliceFromOrig(&tv.orig.ScopeSpans))
}
