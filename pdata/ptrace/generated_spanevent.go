// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// SpanEvent is a time-stamped annotation of the span, consisting of user-supplied
// text description and key-value pairs. See OTLP for event definition.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewSpanEvent function to create new instances.
// Important: zero-initialized instance is not valid for use.
type SpanEvent struct {
	*pSpanEvent
}

type pSpanEvent struct {
	orig   *otlptrace.Span_Event
	state  *internal.State
	parent SpanEventSlice
	idx    int
}

func (ms SpanEvent) getOrig() *otlptrace.Span_Event {
	if *ms.state == internal.StateDirty {
		ms.orig, ms.state = ms.parent.refreshElementOrigState(ms.idx)
	}
	return ms.orig
}

func (ms SpanEvent) ensureMutability() {
	if *ms.state == internal.StateShared {
		ms.parent.ensureMutability()
	}
}

func (ms SpanEvent) getState() *internal.State {
	return ms.state
}

type wrappedSpanEventAttributes struct {
	SpanEvent
}

func (es wrappedSpanEventAttributes) GetChildOrig() *[]otlpcommon.KeyValue {
	return &es.getOrig().Attributes
}

func (es wrappedSpanEventAttributes) EnsureMutability() {
	es.ensureMutability()
}

func (es wrappedSpanEventAttributes) GetState() *internal.State {
	return es.getState()
}

func newSpanEvent(orig *otlptrace.Span_Event, parent SpanEventSlice, idx int) SpanEvent {
	return SpanEvent{&pSpanEvent{
		orig:   orig,
		state:  parent.getState(),
		parent: parent,
		idx:    idx,
	}}
}

// NewSpanEvent creates a new empty SpanEvent.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewSpanEvent() SpanEvent {
	state := internal.StateExclusive
	return SpanEvent{&pSpanEvent{orig: &otlptrace.Span_Event{}, state: &state}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms SpanEvent) MoveTo(dest SpanEvent) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlptrace.Span_Event{}
}

// Timestamp returns the timestamp associated with this SpanEvent.
func (ms SpanEvent) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.getOrig().TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this SpanEvent.
func (ms SpanEvent) SetTimestamp(v pcommon.Timestamp) {
	ms.ensureMutability()
	ms.getOrig().TimeUnixNano = uint64(v)
}

// Name returns the name associated with this SpanEvent.
func (ms SpanEvent) Name() string {
	return ms.getOrig().Name
}

// SetName replaces the name associated with this SpanEvent.
func (ms SpanEvent) SetName(v string) {
	ms.ensureMutability()
	ms.getOrig().Name = v
}

// Attributes returns the <no value> associated with this SpanEvent.
func (ms SpanEvent) Attributes() pcommon.Map {
	return pcommon.Map(internal.NewMapFromParent(wrappedSpanEventAttributes{SpanEvent: ms}))
}

// DroppedAttributesCount returns the droppedattributescount associated with this SpanEvent.
func (ms SpanEvent) DroppedAttributesCount() uint32 {
	return ms.getOrig().DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this SpanEvent.
func (ms SpanEvent) SetDroppedAttributesCount(v uint32) {
	ms.ensureMutability()
	ms.getOrig().DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms SpanEvent) CopyTo(dest SpanEvent) {
	dest.ensureMutability()
	dest.SetTimestamp(ms.Timestamp())
	dest.SetName(ms.Name())
	ms.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}
