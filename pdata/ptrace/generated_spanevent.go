// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// SpanEvent is a time-stamped annotation of the span, consisting of user-supplied
// text description and key-value pairs. See OTLP for event definition.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSpanEvent function to create new instances.
// Important: zero-initialized instance is not valid for use.
type SpanEvent struct {
	commonSpanEvent
}

type MutableSpanEvent struct {
	commonSpanEvent
	preventConversion struct{} // nolint:unused
}

type commonSpanEvent struct {
	orig *otlptrace.Span_Event
}

func newSpanEventFromOrig(orig *otlptrace.Span_Event) SpanEvent {
	return SpanEvent{commonSpanEvent{orig}}
}

func newMutableSpanEventFromOrig(orig *otlptrace.Span_Event) MutableSpanEvent {
	return MutableSpanEvent{commonSpanEvent: commonSpanEvent{orig}}
}

// NewMutableSpanEvent creates a new empty SpanEvent.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSpanEvent() MutableSpanEvent {
	return newMutableSpanEventFromOrig(&otlptrace.Span_Event{})
}

// nolint:unused
func (ms SpanEvent) asMutable() MutableSpanEvent {
	return MutableSpanEvent{commonSpanEvent: commonSpanEvent{orig: ms.orig}}
}

func (ms MutableSpanEvent) AsImmutable() SpanEvent {
	return SpanEvent{commonSpanEvent{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSpanEvent) MoveTo(dest MutableSpanEvent) {
	*dest.orig = *ms.orig
	*ms.orig = otlptrace.Span_Event{}
}

// Timestamp returns the timestamp associated with this SpanEvent.
func (ms commonSpanEvent) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this SpanEvent.
func (ms MutableSpanEvent) SetTimestamp(v pcommon.Timestamp) {
	ms.orig.TimeUnixNano = uint64(v)
}

// Name returns the name associated with this SpanEvent.
func (ms commonSpanEvent) Name() string {
	return ms.orig.Name
}

// SetName replaces the name associated with this SpanEvent.
func (ms MutableSpanEvent) SetName(v string) {
	ms.orig.Name = v
}

// Attributes returns the Attributes associated with this SpanEvent.
func (ms SpanEvent) Attributes() pcommon.Map {
	return internal.NewMapFromOrig(&ms.orig.Attributes)
}

func (ms MutableSpanEvent) Attributes() pcommon.MutableMap {
	return internal.NewMutableMapFromOrig(&ms.orig.Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this SpanEvent.
func (ms commonSpanEvent) DroppedAttributesCount() uint32 {
	return ms.orig.DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this SpanEvent.
func (ms MutableSpanEvent) SetDroppedAttributesCount(v uint32) {
	ms.orig.DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSpanEvent) CopyTo(dest MutableSpanEvent) {
	dest.SetTimestamp(ms.Timestamp())
	dest.SetName(ms.Name())
	SpanEvent{ms}.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func generateTestSpanEvent() MutableSpanEvent {
	tv := NewMutableSpanEvent()
	fillTestSpanEvent(tv)
	return tv
}

func fillTestSpanEvent(tv MutableSpanEvent) {
	tv.orig.TimeUnixNano = 1234567890
	tv.orig.Name = "test_name"
	internal.FillTestMap(internal.NewMutableMapFromOrig(&tv.orig.Attributes))
	tv.orig.DroppedAttributesCount = uint32(17)
}
