// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// SpanEvent is a time-stamped annotation of the span, consisting of user-supplied
// text description and key-value pairs. See OTLP for event definition.
type SpanEvent interface {
	commonSpanEvent
	Attributes() pcommon.Map
}

type MutableSpanEvent interface {
	commonSpanEvent
	MoveTo(dest MutableSpanEvent)
	SetTimestamp(pcommon.Timestamp)
	SetName(string)
	Attributes() pcommon.MutableMap
	SetDroppedAttributesCount(uint32)
}

type commonSpanEvent interface {
	getOrig() *otlptrace.Span_Event
	CopyTo(dest MutableSpanEvent)
	Timestamp() pcommon.Timestamp
	Name() string
	DroppedAttributesCount() uint32
}

type immutableSpanEvent struct {
	orig *otlptrace.Span_Event
}

type mutableSpanEvent struct {
	immutableSpanEvent
}

func newImmutableSpanEvent(orig *otlptrace.Span_Event) immutableSpanEvent {
	return immutableSpanEvent{orig}
}

func newMutableSpanEvent(orig *otlptrace.Span_Event) mutableSpanEvent {
	return mutableSpanEvent{immutableSpanEvent{orig}}
}

func (ms immutableSpanEvent) getOrig() *otlptrace.Span_Event {
	return ms.orig
}

// NewSpanEvent creates a new empty SpanEvent.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewSpanEvent() MutableSpanEvent {
	return newMutableSpanEvent(&otlptrace.Span_Event{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableSpanEvent) MoveTo(dest MutableSpanEvent) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlptrace.Span_Event{}
}

// Timestamp returns the timestamp associated with this SpanEvent.
func (ms immutableSpanEvent) Timestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.TimeUnixNano)
}

// SetTimestamp replaces the timestamp associated with this SpanEvent.
func (ms mutableSpanEvent) SetTimestamp(v pcommon.Timestamp) {
	ms.orig.TimeUnixNano = uint64(v)
}

// Name returns the name associated with this SpanEvent.
func (ms immutableSpanEvent) Name() string {
	return ms.getOrig().Name
}

// SetName replaces the name associated with this SpanEvent.
func (ms mutableSpanEvent) SetName(v string) {
	ms.getOrig().Name = v
}

// Attributes returns the Attributes associated with this SpanEvent.
func (ms immutableSpanEvent) Attributes() pcommon.Map {
	return internal.NewImmutableMap(&ms.getOrig().Attributes)
}

func (ms mutableSpanEvent) Attributes() pcommon.MutableMap {
	return internal.NewMutableMap(&ms.getOrig().Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this SpanEvent.
func (ms immutableSpanEvent) DroppedAttributesCount() uint32 {
	return ms.getOrig().DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this SpanEvent.
func (ms mutableSpanEvent) SetDroppedAttributesCount(v uint32) {
	ms.getOrig().DroppedAttributesCount = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableSpanEvent) CopyTo(dest MutableSpanEvent) {
	dest.SetTimestamp(ms.Timestamp())
	dest.SetName(ms.Name())
	ms.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
}

func generateTestSpanEvent() MutableSpanEvent {
	tv := NewSpanEvent()
	fillTestSpanEvent(tv)
	return tv
}

func fillTestSpanEvent(tv MutableSpanEvent) {
	tv.getOrig().TimeUnixNano = 1234567890
	tv.getOrig().Name = "test_name"
	internal.FillTestMap(internal.NewMutableMap(&tv.getOrig().Attributes))
	tv.getOrig().DroppedAttributesCount = uint32(17)
}
