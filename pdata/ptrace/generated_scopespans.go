// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeSpans is a collection of spans from a LibraryInstrumentation.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableScopeSpans function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeSpans struct {
	commonScopeSpans
}

type MutableScopeSpans struct {
	commonScopeSpans
	preventConversion struct{} // nolint:unused
}

type commonScopeSpans struct {
	orig *otlptrace.ScopeSpans
}

func newScopeSpansFromOrig(orig *otlptrace.ScopeSpans) ScopeSpans {
	return ScopeSpans{commonScopeSpans{orig}}
}

func newMutableScopeSpansFromOrig(orig *otlptrace.ScopeSpans) MutableScopeSpans {
	return MutableScopeSpans{commonScopeSpans: commonScopeSpans{orig}}
}

// NewMutableScopeSpans creates a new empty ScopeSpans.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableScopeSpans() MutableScopeSpans {
	return newMutableScopeSpansFromOrig(&otlptrace.ScopeSpans{})
}

// nolint:unused
func (ms ScopeSpans) asMutable() MutableScopeSpans {
	return MutableScopeSpans{commonScopeSpans: commonScopeSpans{orig: ms.orig}}
}

func (ms MutableScopeSpans) AsImmutable() ScopeSpans {
	return ScopeSpans{commonScopeSpans{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableScopeSpans) MoveTo(dest MutableScopeSpans) {
	*dest.orig = *ms.orig
	*ms.orig = otlptrace.ScopeSpans{}
}

// Scope returns the scope associated with this ScopeSpans.
func (ms ScopeSpans) Scope() pcommon.InstrumentationScope {
	return internal.NewInstrumentationScopeFromOrig(&ms.orig.Scope)
}

// Scope returns the scope associated with this ScopeSpans.
func (ms MutableScopeSpans) Scope() pcommon.MutableInstrumentationScope {
	return internal.NewMutableInstrumentationScopeFromOrig(&ms.orig.Scope)
}

// SchemaUrl returns the schemaurl associated with this ScopeSpans.
func (ms commonScopeSpans) SchemaUrl() string {
	return ms.orig.SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeSpans.
func (ms MutableScopeSpans) SetSchemaUrl(v string) {
	ms.orig.SchemaUrl = v
}

// Spans returns the Spans associated with this ScopeSpans.
func (ms ScopeSpans) Spans() SpanSlice {
	return newSpanSliceFromOrig(&ms.orig.Spans)
}

func (ms MutableScopeSpans) Spans() MutableSpanSlice {
	return newMutableSpanSliceFromOrig(&ms.orig.Spans)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonScopeSpans) CopyTo(dest MutableScopeSpans) {
	ScopeSpans{ms}.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ScopeSpans{ms}.Spans().CopyTo(dest.Spans())
}

func generateTestScopeSpans() MutableScopeSpans {
	tv := NewMutableScopeSpans()
	fillTestScopeSpans(tv)
	return tv
}

func fillTestScopeSpans(tv MutableScopeSpans) {
	internal.FillTestInstrumentationScope(internal.NewMutableInstrumentationScopeFromOrig(&tv.orig.Scope))
	tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestSpanSlice(newMutableSpanSliceFromOrig(&tv.orig.Spans))
}
