// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeSpans is a collection of spans from a LibraryInstrumentation.
type ScopeSpans interface {
	commonScopeSpans
	Scope() pcommon.InstrumentationScope
	Spans() SpanSlice
}

type MutableScopeSpans interface {
	commonScopeSpans
	MoveTo(dest MutableScopeSpans)
	Scope() pcommon.MutableInstrumentationScope
	SetSchemaUrl(string)
	Spans() MutableSpanSlice
}

type commonScopeSpans interface {
	getOrig() *otlptrace.ScopeSpans
	CopyTo(dest MutableScopeSpans)
	SchemaUrl() string
}

type immutableScopeSpans struct {
	orig *otlptrace.ScopeSpans
}

type mutableScopeSpans struct {
	immutableScopeSpans
}

func newImmutableScopeSpans(orig *otlptrace.ScopeSpans) immutableScopeSpans {
	return immutableScopeSpans{orig}
}

func newMutableScopeSpans(orig *otlptrace.ScopeSpans) mutableScopeSpans {
	return mutableScopeSpans{immutableScopeSpans{orig}}
}

func (ms immutableScopeSpans) getOrig() *otlptrace.ScopeSpans {
	return ms.orig
}

// NewScopeSpans creates a new empty ScopeSpans.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewScopeSpans() MutableScopeSpans {
	return newMutableScopeSpans(&otlptrace.ScopeSpans{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableScopeSpans) MoveTo(dest MutableScopeSpans) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlptrace.ScopeSpans{}
}

// Scope returns the scope associated with this ScopeSpans.
func (ms immutableScopeSpans) Scope() pcommon.InstrumentationScope {
	return internal.NewImmutableInstrumentationScope(&ms.getOrig().Scope)
}

// Scope returns the scope associated with this ScopeSpans.
func (ms mutableScopeSpans) Scope() pcommon.MutableInstrumentationScope {
	return internal.NewMutableInstrumentationScope(&ms.getOrig().Scope)
}

// SchemaUrl returns the schemaurl associated with this ScopeSpans.
func (ms immutableScopeSpans) SchemaUrl() string {
	return ms.getOrig().SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeSpans.
func (ms mutableScopeSpans) SetSchemaUrl(v string) {
	ms.getOrig().SchemaUrl = v
}

// Spans returns the Spans associated with this ScopeSpans.
func (ms immutableScopeSpans) Spans() SpanSlice {
	return newImmutableSpanSlice(&ms.getOrig().Spans)
}

func (ms mutableScopeSpans) Spans() MutableSpanSlice {
	return newMutableSpanSlice(&ms.getOrig().Spans)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableScopeSpans) CopyTo(dest MutableScopeSpans) {
	ms.Scope().CopyTo(dest.Scope())
	dest.SetSchemaUrl(ms.SchemaUrl())
	ms.Spans().CopyTo(dest.Spans())
}

func generateTestScopeSpans() MutableScopeSpans {
	tv := NewScopeSpans()
	fillTestScopeSpans(tv)
	return tv
}

func fillTestScopeSpans(tv MutableScopeSpans) {
	internal.FillTestInstrumentationScope(internal.NewInstrumentationScope(&tv.orig.Scope))
	tv.getOrig().SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestSpanSlice(newMutableSpanSlice(&tv.getOrig().Spans))
}
