// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
)

// Status is an optional final status for this span. Semantically, when Status was not
// set, that means the span ended without errors and to assume Status.Ok (code = 0).
type Status interface {
	commonStatus
}

type MutableStatus interface {
	commonStatus
	MoveTo(dest MutableStatus)
	SetCode(StatusCode)
	SetMessage(string)
}

type commonStatus interface {
	getOrig() *otlptrace.Status
	CopyTo(dest MutableStatus)
	Code() StatusCode
	Message() string
}

type immutableStatus struct {
	orig *otlptrace.Status
}

type mutableStatus struct {
	immutableStatus
}

func newImmutableStatus(orig *otlptrace.Status) immutableStatus {
	return immutableStatus{orig}
}

func newMutableStatus(orig *otlptrace.Status) mutableStatus {
	return mutableStatus{immutableStatus{orig}}
}

func (ms immutableStatus) getOrig() *otlptrace.Status {
	return ms.orig
}

// NewStatus creates a new empty Status.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewStatus() MutableStatus {
	return newMutableStatus(&otlptrace.Status{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms mutableStatus) MoveTo(dest MutableStatus) {
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlptrace.Status{}
}

// Code returns the code associated with this Status.
func (ms immutableStatus) Code() StatusCode {
	return StatusCode(ms.orig.Code)
}

// SetCode replaces the code associated with this Status.
func (ms mutableStatus) SetCode(v StatusCode) {
	ms.orig.Code = otlptrace.Status_StatusCode(v)
}

// Message returns the message associated with this Status.
func (ms immutableStatus) Message() string {
	return ms.getOrig().Message
}

// SetMessage replaces the message associated with this Status.
func (ms mutableStatus) SetMessage(v string) {
	ms.getOrig().Message = v
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms immutableStatus) CopyTo(dest MutableStatus) {
	dest.SetCode(ms.Code())
	dest.SetMessage(ms.Message())
}

func generateTestStatus() MutableStatus {
	tv := NewStatus()
	fillTestStatus(tv)
	return tv
}

func fillTestStatus(tv MutableStatus) {
	tv.getOrig().Code = 1
	tv.getOrig().Message = "cancelled"
}
