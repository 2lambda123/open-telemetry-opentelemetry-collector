// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"sort"

	"go.opentelemetry.io/collector/pdata/internal"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
)

// ScopeSpansSlice logically represents a slice of ScopeSpans.
//
// This is a reference type. If passed by value and callee modifies it, the
// caller will see the modification.
//
// Must use NewScopeSpansSlice function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeSpansSlice struct {
	*pScopeSpansSlice
}

type pScopeSpansSlice struct {
	orig   *[]*otlptrace.ScopeSpans
	state  *internal.State
	parent ResourceSpans
}

func newScopeSpansSlice(orig *[]*otlptrace.ScopeSpans, parent ResourceSpans) ScopeSpansSlice {
	return ScopeSpansSlice{&pScopeSpansSlice{
		orig:   orig,
		state:  parent.getState(),
		parent: parent,
	}}
}

func (es ScopeSpansSlice) getOrig() *[]*otlptrace.ScopeSpans {
	if *es.state == internal.StateDirty {
		es.orig, es.state = es.parent.refreshScopeSpansOrigState()
	}
	return es.orig
}

func (es ScopeSpansSlice) ensureMutability() {
	if *es.state == internal.StateShared {
		es.parent.ensureMutability()
	}
}

func (es ScopeSpansSlice) getState() *internal.State {
	return es.state
}

func (es ScopeSpansSlice) refreshElementOrigState(i int) (*otlptrace.ScopeSpans, *internal.State) {
	return (*es.getOrig())[i], es.state
}

// NewScopeSpansSlice creates a ScopeSpansSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewScopeSpansSlice() ScopeSpansSlice {
	orig := []*otlptrace.ScopeSpans(nil)
	state := internal.StateExclusive
	return ScopeSpansSlice{&pScopeSpansSlice{orig: &orig, state: &state}}
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewScopeSpansSlice()".
func (es ScopeSpansSlice) Len() int {
	return len(*es.getOrig())
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es ScopeSpansSlice) At(i int) ScopeSpans {
	return newScopeSpans((*es.getOrig())[i], es, i)
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new ScopeSpansSlice can be initialized:
//
//	es := NewScopeSpansSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es ScopeSpansSlice) EnsureCapacity(newCap int) {
	es.ensureMutability()
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]*otlptrace.ScopeSpans, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty ScopeSpans.
// It returns the newly added ScopeSpans.
func (es ScopeSpansSlice) AppendEmpty() ScopeSpans {
	es.ensureMutability()
	*es.getOrig() = append(*es.getOrig(), &otlptrace.ScopeSpans{})
	return es.At(es.Len() - 1)
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es ScopeSpansSlice) MoveAndAppendTo(dest ScopeSpansSlice) {
	es.ensureMutability()
	dest.ensureMutability()
	if *dest.orig == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.orig = *es.getOrig()
	} else {
		*dest.orig = append(*dest.orig, *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es ScopeSpansSlice) RemoveIf(f func(ScopeSpans) bool) {
	es.ensureMutability()
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	// TODO: Prevent memory leak by erasing truncated values.
	*es.getOrig() = (*es.getOrig())[:newLen]
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es ScopeSpansSlice) CopyTo(dest ScopeSpansSlice) {
	dest.ensureMutability()
	srcLen := es.Len()
	destCap := cap(*dest.orig)
	exclState := internal.StateExclusive
	if srcLen <= destCap {
		(*dest.orig) = (*dest.orig)[:srcLen:destCap]
		for i := range *es.getOrig() {
			srcScopeSpans := ScopeSpans{&pScopeSpans{orig: (*es.getOrig())[i], state: &exclState}}
			destScopeSpans := ScopeSpans{&pScopeSpans{orig: (*dest.orig)[i], state: &exclState}}
			srcScopeSpans.CopyTo(destScopeSpans)
		}
		return
	}
	origs := make([]otlptrace.ScopeSpans, srcLen)
	wrappers := make([]*otlptrace.ScopeSpans, srcLen)
	for i := range *es.getOrig() {
		wrappers[i] = &origs[i]
		srcScopeSpans := ScopeSpans{&pScopeSpans{orig: (*es.getOrig())[i], state: &exclState}}
		destScopeSpans := ScopeSpans{&pScopeSpans{orig: wrappers[i], state: &exclState}}
		srcScopeSpans.CopyTo(destScopeSpans)
	}
	*dest.orig = wrappers
}

// Sort sorts the ScopeSpans elements within ScopeSpansSlice given the
// provided less function so that two instances of ScopeSpansSlice
// can be compared.
func (es ScopeSpansSlice) Sort(less func(a, b ScopeSpans) bool) {
	es.ensureMutability()
	sort.SliceStable(*es.getOrig(), func(i, j int) bool { return less(es.At(i), es.At(j)) })
}
