// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"sort"

	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
)

// ResourceSpansSlice logically represents a slice of ResourceSpans.
type ResourceSpansSlice interface {
	commonResourceSpansSlice
	At(ix int) ResourceSpans
}

type MutableResourceSpansSlice interface {
	commonResourceSpansSlice
	At(ix int) MutableResourceSpans
	EnsureCapacity(newCap int)
	AppendEmpty() MutableResourceSpans
	Sort(less func(a, b MutableResourceSpans) bool)
}

type commonResourceSpansSlice interface {
	Len() int
	CopyTo(dest MutableResourceSpansSlice)
	getOrig() *[]*otlptrace.ResourceSpans
}

type immutableResourceSpansSlice struct {
	orig *[]*otlptrace.ResourceSpans
}

type mutableResourceSpansSlice struct {
	immutableResourceSpansSlice
}

func (es immutableResourceSpansSlice) getOrig() *[]*otlptrace.ResourceSpans {
	return es.orig
}

func newImmutableResourceSpansSlice(orig *[]*otlptrace.ResourceSpans) immutableResourceSpansSlice {
	return immutableResourceSpansSlice{orig}
}

func newMutableResourceSpansSlice(orig *[]*otlptrace.ResourceSpans) mutableResourceSpansSlice {
	return mutableResourceSpansSlice{immutableResourceSpansSlice{orig}}
}

// NewResourceSpansSlice creates a ResourceSpansSlice with 0 elements.
// Can use "EnsureCapacity" to initialize with a given capacity.
func NewResourceSpansSlice() MutableResourceSpansSlice {
	orig := []*otlptrace.ResourceSpans(nil)
	return newMutableResourceSpansSlice(&orig)
}

// Len returns the number of elements in the slice.
//
// Returns "0" for a newly instance created with "NewResourceSpansSlice()".
func (es immutableResourceSpansSlice) Len() int {
	return len(*es.getOrig())
}

// At returns the element at the given index.
//
// This function is used mostly for iterating over all the values in the slice:
//
//	for i := 0; i < es.Len(); i++ {
//	    e := es.At(i)
//	    ... // Do something with the element
//	}
func (es immutableResourceSpansSlice) At(ix int) ResourceSpans {
	return newImmutableResourceSpans((*es.getOrig())[ix])
}

func (es mutableResourceSpansSlice) At(ix int) MutableResourceSpans {
	return newMutableResourceSpans((*es.getOrig())[ix])
}

// CopyTo copies all elements from the current slice overriding the destination.
func (es immutableResourceSpansSlice) CopyTo(dest MutableResourceSpansSlice) {
	srcLen := es.Len()
	destCap := cap(*dest.getOrig())
	if srcLen <= destCap {
		(*dest.getOrig()) = (*dest.getOrig())[:srcLen:destCap]
		for i := range *es.getOrig() {
			newImmutableResourceSpans((*es.getOrig())[i]).CopyTo(newMutableResourceSpans((*dest.getOrig())[i]))
		}
		return
	}
	origs := make([]otlptrace.ResourceSpans, srcLen)
	wrappers := make([]*otlptrace.ResourceSpans, srcLen)
	for i := range *es.getOrig() {
		wrappers[i] = &origs[i]
		newImmutableResourceSpans((*es.getOrig())[i]).CopyTo(newMutableResourceSpans(wrappers[i]))
	}
	*dest.getOrig() = wrappers
}

// EnsureCapacity is an operation that ensures the slice has at least the specified capacity.
// 1. If the newCap <= cap then no change in capacity.
// 2. If the newCap > cap then the slice capacity will be expanded to equal newCap.
//
// Here is how a new ResourceSpansSlice can be initialized:
//
//	es := NewResourceSpansSlice()
//	es.EnsureCapacity(4)
//	for i := 0; i < 4; i++ {
//	    e := es.AppendEmpty()
//	    // Here should set all the values for e.
//	}
func (es mutableResourceSpansSlice) EnsureCapacity(newCap int) {
	oldCap := cap(*es.getOrig())
	if newCap <= oldCap {
		return
	}

	newOrig := make([]*otlptrace.ResourceSpans, len(*es.getOrig()), newCap)
	copy(newOrig, *es.getOrig())
	*es.getOrig() = newOrig
}

// AppendEmpty will append to the end of the slice an empty ResourceSpans.
// It returns the newly added ResourceSpans.
func (es mutableResourceSpansSlice) AppendEmpty() MutableResourceSpans {
	*es.getOrig() = append(*es.getOrig(), &otlptrace.ResourceSpans{})
	return es.At(es.Len() - 1)
}

// Sort sorts the ResourceSpans elements within ResourceSpansSlice given the
// provided less function so that two instances of ResourceSpansSlice
// can be compared.
func (es mutableResourceSpansSlice) Sort(less func(a, b MutableResourceSpans) bool) {
	sort.SliceStable(*es.getOrig(), func(i, j int) bool { return less(es.At(i), es.At(j)) })
}

// MoveAndAppendTo moves all elements from the current slice and appends them to the dest.
// The current slice will be cleared.
func (es mutableResourceSpansSlice) MoveAndAppendTo(dest mutableResourceSpansSlice) {
	if *dest.getOrig() == nil {
		// We can simply move the entire vector and avoid any allocations.
		*dest.getOrig() = *es.getOrig()
	} else {
		*dest.getOrig() = append(*dest.getOrig(), *es.getOrig()...)
	}
	*es.getOrig() = nil
}

// RemoveIf calls f sequentially for each element present in the slice.
// If f returns true, the element is removed from the slice.
func (es mutableResourceSpansSlice) RemoveIf(f func(MutableResourceSpans) bool) {
	newLen := 0
	for i := 0; i < len(*es.getOrig()); i++ {
		if f(es.At(i)) {
			continue
		}
		if newLen == i {
			// Nothing to move, element is at the right place.
			newLen++
			continue
		}
		(*es.getOrig())[newLen] = (*es.getOrig())[i]
		newLen++
	}
	// TODO: Prevent memory leak by erasing truncated values.
	*es.orig = (*es.orig)[:newLen]
}

func generateTestResourceSpansSlice() MutableResourceSpansSlice {
	tv := NewResourceSpansSlice()
	fillTestResourceSpansSlice(tv)
	return tv
}

func fillTestResourceSpansSlice(tv MutableResourceSpansSlice) {
	*tv.orig = make([]*otlptrace.ResourceSpans, 7)
	for i := 0; i < 7; i++ {
		(*tv.orig)[i] = &otlptrace.ResourceSpans{}
		fillTestResourceSpans(newResourceSpans((*tv.orig)[i]))
	}
}
