// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// Span represents a single operation within a trace.
// See Span definition in OTLP: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewMutableSpan function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Span struct {
	commonSpan
}

type MutableSpan struct {
	commonSpan
	preventConversion struct{} // nolint:unused
}

type commonSpan struct {
	orig *otlptrace.Span
}

func newSpanFromOrig(orig *otlptrace.Span) Span {
	return Span{commonSpan{orig}}
}

func newMutableSpanFromOrig(orig *otlptrace.Span) MutableSpan {
	return MutableSpan{commonSpan: commonSpan{orig}}
}

// NewMutableSpan creates a new empty Span.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewMutableSpan() MutableSpan {
	return newMutableSpanFromOrig(&otlptrace.Span{})
}

// nolint:unused
func (ms Span) asMutable() MutableSpan {
	return MutableSpan{commonSpan: commonSpan{orig: ms.orig}}
}

func (ms MutableSpan) AsImmutable() Span {
	return Span{commonSpan{orig: ms.orig}}
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms MutableSpan) MoveTo(dest MutableSpan) {
	*dest.orig = *ms.orig
	*ms.orig = otlptrace.Span{}
}

// TraceID returns the traceid associated with this Span.
func (ms commonSpan) TraceID() pcommon.TraceID {
	return pcommon.TraceID(ms.orig.TraceId)
}

// SetTraceID replaces the traceid associated with this Span.
func (ms MutableSpan) SetTraceID(v pcommon.TraceID) {
	ms.orig.TraceId = data.TraceID(v)
}

// SpanID returns the spanid associated with this Span.
func (ms commonSpan) SpanID() pcommon.SpanID {
	return pcommon.SpanID(ms.orig.SpanId)
}

// SetSpanID replaces the spanid associated with this Span.
func (ms MutableSpan) SetSpanID(v pcommon.SpanID) {
	ms.orig.SpanId = data.SpanID(v)
}

// TraceState returns the tracestate associated with this Span.
func (ms Span) TraceState() pcommon.TraceState {
	return internal.NewTraceStateFromOrig(&ms.orig.TraceState)
}

// TraceState returns the tracestate associated with this Span.
func (ms MutableSpan) TraceState() pcommon.MutableTraceState {
	return internal.NewMutableTraceStateFromOrig(&ms.orig.TraceState)
}

// ParentSpanID returns the parentspanid associated with this Span.
func (ms commonSpan) ParentSpanID() pcommon.SpanID {
	return pcommon.SpanID(ms.orig.ParentSpanId)
}

// SetParentSpanID replaces the parentspanid associated with this Span.
func (ms MutableSpan) SetParentSpanID(v pcommon.SpanID) {
	ms.orig.ParentSpanId = data.SpanID(v)
}

// Name returns the name associated with this Span.
func (ms commonSpan) Name() string {
	return ms.orig.Name
}

// SetName replaces the name associated with this Span.
func (ms MutableSpan) SetName(v string) {
	ms.orig.Name = v
}

// Kind returns the kind associated with this Span.
func (ms commonSpan) Kind() SpanKind {
	return SpanKind(ms.orig.Kind)
}

// SetKind replaces the kind associated with this Span.
func (ms MutableSpan) SetKind(v SpanKind) {
	ms.orig.Kind = otlptrace.Span_SpanKind(v)
}

// StartTimestamp returns the starttimestamp associated with this Span.
func (ms commonSpan) StartTimestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.StartTimeUnixNano)
}

// SetStartTimestamp replaces the starttimestamp associated with this Span.
func (ms MutableSpan) SetStartTimestamp(v pcommon.Timestamp) {
	ms.orig.StartTimeUnixNano = uint64(v)
}

// EndTimestamp returns the endtimestamp associated with this Span.
func (ms commonSpan) EndTimestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.orig.EndTimeUnixNano)
}

// SetEndTimestamp replaces the endtimestamp associated with this Span.
func (ms MutableSpan) SetEndTimestamp(v pcommon.Timestamp) {
	ms.orig.EndTimeUnixNano = uint64(v)
}

// Attributes returns the Attributes associated with this Span.
func (ms Span) Attributes() pcommon.Map {
	return internal.NewMapFromOrig(&ms.orig.Attributes)
}

func (ms MutableSpan) Attributes() pcommon.MutableMap {
	return internal.NewMutableMapFromOrig(&ms.orig.Attributes)
}

// DroppedAttributesCount returns the droppedattributescount associated with this Span.
func (ms commonSpan) DroppedAttributesCount() uint32 {
	return ms.orig.DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this Span.
func (ms MutableSpan) SetDroppedAttributesCount(v uint32) {
	ms.orig.DroppedAttributesCount = v
}

// Events returns the Events associated with this Span.
func (ms Span) Events() SpanEventSlice {
	return newSpanEventSliceFromOrig(&ms.orig.Events)
}

func (ms MutableSpan) Events() MutableSpanEventSlice {
	return newMutableSpanEventSliceFromOrig(&ms.orig.Events)
}

// DroppedEventsCount returns the droppedeventscount associated with this Span.
func (ms commonSpan) DroppedEventsCount() uint32 {
	return ms.orig.DroppedEventsCount
}

// SetDroppedEventsCount replaces the droppedeventscount associated with this Span.
func (ms MutableSpan) SetDroppedEventsCount(v uint32) {
	ms.orig.DroppedEventsCount = v
}

// Links returns the Links associated with this Span.
func (ms Span) Links() SpanLinkSlice {
	return newSpanLinkSliceFromOrig(&ms.orig.Links)
}

func (ms MutableSpan) Links() MutableSpanLinkSlice {
	return newMutableSpanLinkSliceFromOrig(&ms.orig.Links)
}

// DroppedLinksCount returns the droppedlinkscount associated with this Span.
func (ms commonSpan) DroppedLinksCount() uint32 {
	return ms.orig.DroppedLinksCount
}

// SetDroppedLinksCount replaces the droppedlinkscount associated with this Span.
func (ms MutableSpan) SetDroppedLinksCount(v uint32) {
	ms.orig.DroppedLinksCount = v
}

// Status returns the status associated with this Span.
func (ms Span) Status() Status {
	return newStatusFromOrig(&ms.orig.Status)
}

// Status returns the status associated with this MutableSpan.
func (ms MutableSpan) Status() MutableStatus {
	return newMutableStatusFromOrig(&ms.orig.Status)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms commonSpan) CopyTo(dest MutableSpan) {
	dest.SetTraceID(ms.TraceID())
	dest.SetSpanID(ms.SpanID())
	Span{ms}.TraceState().CopyTo(dest.TraceState())
	dest.SetParentSpanID(ms.ParentSpanID())
	dest.SetName(ms.Name())
	dest.SetKind(ms.Kind())
	dest.SetStartTimestamp(ms.StartTimestamp())
	dest.SetEndTimestamp(ms.EndTimestamp())
	Span{ms}.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
	Span{ms}.Events().CopyTo(dest.Events())
	dest.SetDroppedEventsCount(ms.DroppedEventsCount())
	Span{ms}.Links().CopyTo(dest.Links())
	dest.SetDroppedLinksCount(ms.DroppedLinksCount())
	Span{ms}.Status().CopyTo(dest.Status())
}

func generateTestSpan() MutableSpan {
	tv := NewMutableSpan()
	fillTestSpan(tv)
	return tv
}

func fillTestSpan(tv MutableSpan) {
	tv.orig.TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
	tv.orig.SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	internal.FillTestTraceState(internal.NewMutableTraceStateFromOrig(&tv.orig.TraceState))
	tv.orig.ParentSpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	tv.orig.Name = "test_name"
	tv.orig.Kind = otlptrace.Span_SpanKind(3)
	tv.orig.StartTimeUnixNano = 1234567890
	tv.orig.EndTimeUnixNano = 1234567890
	internal.FillTestMap(internal.NewMutableMapFromOrig(&tv.orig.Attributes))
	tv.orig.DroppedAttributesCount = uint32(17)
	fillTestSpanEventSlice(newMutableSpanEventSliceFromOrig(&tv.orig.Events))
	tv.orig.DroppedEventsCount = uint32(17)
	fillTestSpanLinkSlice(newMutableSpanLinkSliceFromOrig(&tv.orig.Links))
	tv.orig.DroppedLinksCount = uint32(17)
	fillTestStatus(newMutableStatusFromOrig(&tv.orig.Status))
}
