// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package ptrace

import (
	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// Span represents a single operation within a trace.
// See Span definition in OTLP: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewSpan function to create new instances.
// Important: zero-initialized instance is not valid for use.
type Span struct {
	parent SpanSlice
	idx    int
}

func (ms Span) getOrig() *otlptrace.Span {
	return ms.parent.getChildOrig(ms.idx)
}

func (ms Span) ensureMutability() {
	ms.parent.ensureMutability()
}

type wrappedSpanTraceState struct {
	Span
}

func (es wrappedSpanTraceState) GetChildOrig() *string {
	return &es.getOrig().TraceState
}

func (es wrappedSpanTraceState) EnsureMutability() {
	es.ensureMutability()
}

type wrappedSpanAttributes struct {
	Span
}

func (es wrappedSpanAttributes) GetChildOrig() *[]otlpcommon.KeyValue {
	return &es.getOrig().Attributes
}

func (es wrappedSpanAttributes) EnsureMutability() {
	es.ensureMutability()
}

func (ms Span) getEventsOrig() *[]*otlptrace.Span_Event {
	return &ms.getOrig().Events
}

func newSpanFromEventsOrig(childOrig *[]*otlptrace.Span_Event) Span {
	return newSpanFromOrig(&otlptrace.Span{
		Events: *childOrig,
	})
}

func (ms Span) getLinksOrig() *[]*otlptrace.Span_Link {
	return &ms.getOrig().Links
}

func newSpanFromLinksOrig(childOrig *[]*otlptrace.Span_Link) Span {
	return newSpanFromOrig(&otlptrace.Span{
		Links: *childOrig,
	})
}

func (ms Span) getStatusOrig() *otlptrace.Status {
	return &ms.getOrig().Status
}

func newSpanFromStatusOrig(childOrig *otlptrace.Status) Span {
	return newSpanFromOrig(&otlptrace.Span{
		Status: *childOrig,
	})
}

func newSpanFromOrig(orig *otlptrace.Span) Span {
	return Span{parent: newSpanSliceFromElementOrig(orig)}
}

func newSpanFromParent(parent SpanSlice, idx int) Span {
	return Span{parent: parent, idx: idx}
}

// NewSpan creates a new empty Span.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewSpan() Span {
	return newSpanFromOrig(&otlptrace.Span{})
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms Span) MoveTo(dest Span) {
	ms.ensureMutability()
	dest.ensureMutability()
	*dest.getOrig() = *ms.getOrig()
	*ms.getOrig() = otlptrace.Span{}
}

// TraceID returns the traceid associated with this Span.
func (ms Span) TraceID() pcommon.TraceID {
	return pcommon.TraceID(ms.getOrig().TraceId)
}

// SetTraceID replaces the traceid associated with this Span.
func (ms Span) SetTraceID(v pcommon.TraceID) {
	ms.ensureMutability()
	ms.getOrig().TraceId = data.TraceID(v)
}

// SpanID returns the spanid associated with this Span.
func (ms Span) SpanID() pcommon.SpanID {
	return pcommon.SpanID(ms.getOrig().SpanId)
}

// SetSpanID replaces the spanid associated with this Span.
func (ms Span) SetSpanID(v pcommon.SpanID) {
	ms.ensureMutability()
	ms.getOrig().SpanId = data.SpanID(v)
}

// TraceState returns the tracestate associated with this Span.
func (ms Span) TraceState() pcommon.TraceState {
	return pcommon.TraceState(internal.NewTraceStateFromParent(wrappedSpanTraceState{Span: ms}))
}

// ParentSpanID returns the parentspanid associated with this Span.
func (ms Span) ParentSpanID() pcommon.SpanID {
	return pcommon.SpanID(ms.getOrig().ParentSpanId)
}

// SetParentSpanID replaces the parentspanid associated with this Span.
func (ms Span) SetParentSpanID(v pcommon.SpanID) {
	ms.ensureMutability()
	ms.getOrig().ParentSpanId = data.SpanID(v)
}

// Name returns the name associated with this Span.
func (ms Span) Name() string {
	return ms.getOrig().Name
}

// SetName replaces the name associated with this Span.
func (ms Span) SetName(v string) {
	ms.ensureMutability()
	ms.getOrig().Name = v
}

// Kind returns the kind associated with this Span.
func (ms Span) Kind() SpanKind {
	return SpanKind(ms.getOrig().Kind)
}

// SetKind replaces the kind associated with this Span.
func (ms Span) SetKind(v SpanKind) {
	ms.ensureMutability()
	ms.getOrig().Kind = otlptrace.Span_SpanKind(v)
}

// StartTimestamp returns the starttimestamp associated with this Span.
func (ms Span) StartTimestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.getOrig().StartTimeUnixNano)
}

// SetStartTimestamp replaces the starttimestamp associated with this Span.
func (ms Span) SetStartTimestamp(v pcommon.Timestamp) {
	ms.ensureMutability()
	ms.getOrig().StartTimeUnixNano = uint64(v)
}

// EndTimestamp returns the endtimestamp associated with this Span.
func (ms Span) EndTimestamp() pcommon.Timestamp {
	return pcommon.Timestamp(ms.getOrig().EndTimeUnixNano)
}

// SetEndTimestamp replaces the endtimestamp associated with this Span.
func (ms Span) SetEndTimestamp(v pcommon.Timestamp) {
	ms.ensureMutability()
	ms.getOrig().EndTimeUnixNano = uint64(v)
}

// Attributes returns the <no value> associated with this Span.
func (ms Span) Attributes() pcommon.Map {
	return pcommon.Map(internal.NewMapFromParent(wrappedSpanAttributes{Span: ms}))
}

// DroppedAttributesCount returns the droppedattributescount associated with this Span.
func (ms Span) DroppedAttributesCount() uint32 {
	return ms.getOrig().DroppedAttributesCount
}

// SetDroppedAttributesCount replaces the droppedattributescount associated with this Span.
func (ms Span) SetDroppedAttributesCount(v uint32) {
	ms.ensureMutability()
	ms.getOrig().DroppedAttributesCount = v
}

// Events returns the <no value> associated with this Span.
func (ms Span) Events() SpanEventSlice {
	return newSpanEventSliceFromParent(ms)
}

// DroppedEventsCount returns the droppedeventscount associated with this Span.
func (ms Span) DroppedEventsCount() uint32 {
	return ms.getOrig().DroppedEventsCount
}

// SetDroppedEventsCount replaces the droppedeventscount associated with this Span.
func (ms Span) SetDroppedEventsCount(v uint32) {
	ms.ensureMutability()
	ms.getOrig().DroppedEventsCount = v
}

// Links returns the <no value> associated with this Span.
func (ms Span) Links() SpanLinkSlice {
	return newSpanLinkSliceFromParent(ms)
}

// DroppedLinksCount returns the droppedlinkscount associated with this Span.
func (ms Span) DroppedLinksCount() uint32 {
	return ms.getOrig().DroppedLinksCount
}

// SetDroppedLinksCount replaces the droppedlinkscount associated with this Span.
func (ms Span) SetDroppedLinksCount(v uint32) {
	ms.ensureMutability()
	ms.getOrig().DroppedLinksCount = v
}

// Status returns the status associated with this Span.
func (ms Span) Status() Status {
	return newStatusFromParent(ms)
}

// CopyTo copies all properties from the current struct overriding the destination.
func (ms Span) CopyTo(dest Span) {
	dest.ensureMutability()
	dest.SetTraceID(ms.TraceID())
	dest.SetSpanID(ms.SpanID())
	ms.TraceState().CopyTo(dest.TraceState())
	dest.SetParentSpanID(ms.ParentSpanID())
	dest.SetName(ms.Name())
	dest.SetKind(ms.Kind())
	dest.SetStartTimestamp(ms.StartTimestamp())
	dest.SetEndTimestamp(ms.EndTimestamp())
	ms.Attributes().CopyTo(dest.Attributes())
	dest.SetDroppedAttributesCount(ms.DroppedAttributesCount())
	ms.Events().CopyTo(dest.Events())
	dest.SetDroppedEventsCount(ms.DroppedEventsCount())
	ms.Links().CopyTo(dest.Links())
	dest.SetDroppedLinksCount(ms.DroppedLinksCount())
	ms.Status().CopyTo(dest.Status())
}
