// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package configtls

import "encoding/json"
import "fmt"
import "go.opentelemetry.io/collector/config/configopaque"
import "time"

type ClientConfig struct {
	// Insecure corresponds to the JSON schema field "insecure".
	Insecure bool `mapstructure:"insecure"`

	// InsecureSkipVerify corresponds to the JSON schema field "insecure_skip_verify".
	InsecureSkipVerify bool `mapstructure:"insecure_skip_verify"`

	// ServerNameOverride corresponds to the JSON schema field "server_name_override".
	ServerNameOverride string `mapstructure:"server_name_override"`

	Config `mapstructure:",squash"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ClientConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain ClientConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["insecure"]; !ok || v == nil {
		plain.Insecure = true
	}
	if v, ok := raw["insecure_skip_verify"]; !ok || v == nil {
		plain.InsecureSkipVerify = true
	}
	if v, ok := raw["server_name_override"]; !ok || v == nil {
		plain.ServerNameOverride = ""
	}
	*j = ClientConfig(plain)
	return nil
}

// SetDefaults sets the fields of ClientConfig to their defaults.
// Fields which do not have a default value are left untouched.
func (c *ClientConfig) SetDefaults() {
	c.Insecure = true
	c.InsecureSkipVerify = true
	c.ServerNameOverride = ""
}

type Config struct {
	// CaFile corresponds to the JSON schema field "ca_file".
	CaFile string `mapstructure:"ca_file"`

	// CaPem corresponds to the JSON schema field "ca_pem".
	CaPem configopaque.String `mapstructure:"ca_pem"`

	// CertFile corresponds to the JSON schema field "cert_file".
	CertFile string `mapstructure:"cert_file"`

	// CertPem corresponds to the JSON schema field "cert_pem".
	CertPem configopaque.String `mapstructure:"cert_pem"`

	// CipherSuites corresponds to the JSON schema field "cipher_suites".
	CipherSuites []string `mapstructure:"cipher_suites"`

	// IncludeSystemCaCertsPool corresponds to the JSON schema field
	// "include_system_ca_certs_pool".
	IncludeSystemCaCertsPool bool `mapstructure:"include_system_ca_certs_pool"`

	// Insecure corresponds to the JSON schema field "insecure".
	Insecure bool `mapstructure:"insecure"`

	// InsecureSkipVerify corresponds to the JSON schema field "insecure_skip_verify".
	InsecureSkipVerify bool `mapstructure:"insecure_skip_verify"`

	// KeyFile corresponds to the JSON schema field "key_file".
	KeyFile string `mapstructure:"key_file"`

	// KeyPem corresponds to the JSON schema field "key_pem".
	KeyPem configopaque.String `mapstructure:"key_pem"`

	// MaxVersion corresponds to the JSON schema field "max_version".
	MaxVersion string `mapstructure:"max_version"`

	// MinVersion corresponds to the JSON schema field "min_version".
	MinVersion string `mapstructure:"min_version"`

	// ReloadInterval corresponds to the JSON schema field "reload_interval".
	ReloadInterval time.Duration `mapstructure:"reload_interval"`

	// ServerNameOverride corresponds to the JSON schema field "server_name_override".
	ServerNameOverride string `mapstructure:"server_name_override"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["ca_file"]; !ok || v == nil {
		plain.CaFile = ""
	}
	if v, ok := raw["ca_pem"]; !ok || v == nil {
		plain.CaPem = ""
	}
	if v, ok := raw["cert_file"]; !ok || v == nil {
		plain.CertFile = ""
	}
	if v, ok := raw["cert_pem"]; !ok || v == nil {
		plain.CertPem = ""
	}
	if v, ok := raw["include_system_ca_certs_pool"]; !ok || v == nil {
		plain.IncludeSystemCaCertsPool = true
	}
	if v, ok := raw["insecure"]; !ok || v == nil {
		plain.Insecure = false
	}
	if v, ok := raw["insecure_skip_verify"]; !ok || v == nil {
		plain.InsecureSkipVerify = false
	}
	if v, ok := raw["key_file"]; !ok || v == nil {
		plain.KeyFile = ""
	}
	if v, ok := raw["key_pem"]; !ok || v == nil {
		plain.KeyPem = ""
	}
	if v, ok := raw["max_version"]; !ok || v == nil {
		plain.MaxVersion = ""
	}
	if v, ok := raw["min_version"]; !ok || v == nil {
		plain.MinVersion = ""
	}
	if v, ok := raw["reload_interval"]; !ok || v == nil {
		defaultDuration, err := time.ParseDuration("33.3s")
		if err != nil {
			return fmt.Errorf("failed to parse the \"33.3s\" default value for field reload_interval:%w }", err)
		}
		plain.ReloadInterval = defaultDuration
	}
	if v, ok := raw["server_name_override"]; !ok || v == nil {
		plain.ServerNameOverride = ""
	}
	*j = Config(plain)
	return nil
}

// SetDefaults sets the fields of Config to their defaults.
// Fields which do not have a default value are left untouched.
func (c *Config) SetDefaults() {
	c.CaFile = ""
	c.CaPem = ""
	c.CertFile = ""
	c.CertPem = ""
	c.IncludeSystemCaCertsPool = true
	c.Insecure = false
	c.InsecureSkipVerify = false
	c.KeyFile = ""
	c.KeyPem = ""
	c.MaxVersion = ""
	c.MinVersion = ""
	c.ReloadInterval = "PT33.3S"
	c.ServerNameOverride = ""
}

type ServerConfig struct {
	// ClientCaFile corresponds to the JSON schema field "client_ca_file".
	ClientCaFile string `mapstructure:"client_ca_file"`

	// ClientCaFileReload corresponds to the JSON schema field
	// "client_ca_file_reload".
	ClientCaFileReload bool `mapstructure:"client_ca_file_reload"`

	Config `mapstructure:",squash"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ServerConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain ServerConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["client_ca_file"]; !ok || v == nil {
		plain.ClientCaFile = ""
	}
	if v, ok := raw["client_ca_file_reload"]; !ok || v == nil {
		plain.ClientCaFileReload = true
	}
	*j = ServerConfig(plain)
	return nil
}

// SetDefaults sets the fields of ServerConfig to their defaults.
// Fields which do not have a default value are left untouched.
func (c *ServerConfig) SetDefaults() {
	c.ClientCaFile = ""
	c.ClientCaFileReload = true
}
