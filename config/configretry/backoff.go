// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package configretry

import "encoding/json"
import "fmt"
import "time"

type RetryOnFailure struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `mapstructure:"enabled"`

	// InitialInterval corresponds to the JSON schema field "initial_interval".
	InitialInterval time.Duration `mapstructure:"initial_interval"`

	// MaxElapsedTime corresponds to the JSON schema field "max_elapsed_time".
	MaxElapsedTime time.Duration `mapstructure:"max_elapsed_time"`

	// MaxInterval corresponds to the JSON schema field "max_interval".
	MaxInterval time.Duration `mapstructure:"max_interval"`

	// Multiplier corresponds to the JSON schema field "multiplier".
	Multiplier float64 `mapstructure:"multiplier"`

	// RandomizationFactor corresponds to the JSON schema field
	// "randomization_factor".
	RandomizationFactor float64 `mapstructure:"randomization_factor"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RetryOnFailure) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain RetryOnFailure
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["enabled"]; !ok || v == nil {
		plain.Enabled = true
	}
	if v, ok := raw["initial_interval"]; !ok || v == nil {
		defaultDuration, err := time.ParseDuration("5s")
		if err != nil {
			return fmt.Errorf("failed to parse the \"5s\" default value for field initial_interval:%w }", err)
		}
		plain.InitialInterval = defaultDuration
	}
	if v, ok := raw["max_elapsed_time"]; !ok || v == nil {
		defaultDuration, err := time.ParseDuration("5m0s")
		if err != nil {
			return fmt.Errorf("failed to parse the \"5m0s\" default value for field max_elapsed_time:%w }", err)
		}
		plain.MaxElapsedTime = defaultDuration
	}
	if v, ok := raw["max_interval"]; !ok || v == nil {
		defaultDuration, err := time.ParseDuration("30s")
		if err != nil {
			return fmt.Errorf("failed to parse the \"30s\" default value for field max_interval:%w }", err)
		}
		plain.MaxInterval = defaultDuration
	}
	if v, ok := raw["multiplier"]; !ok || v == nil {
		plain.Multiplier = 1.5
	}
	if v, ok := raw["randomization_factor"]; !ok || v == nil {
		plain.RandomizationFactor = 0.5
	}
	*j = RetryOnFailure(plain)
	return nil
}

// SetDefaults sets the fields of RetryOnFailure to their defaults.
// Fields which do not have a default value are left untouched.
func (c *RetryOnFailure) SetDefaults() {
	c.Enabled = true
	c.InitialInterval = "PT5S"
	c.MaxElapsedTime = "PT5M"
	c.MaxInterval = "PT30S"
	c.Multiplier = 1.5
	c.RandomizationFactor = 0.5
}
