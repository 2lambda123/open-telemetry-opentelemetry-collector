// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/config/configtelemetry"
)

// Deprecated: [v0.108.0] use LeveledMeter instead.
func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("go.opentelemetry.io/collector/processor/processorhelper")
}

func LeveledMeter(settings component.TelemetrySettings, level configtelemetry.Level) metric.Meter {
	return settings.LeveledMeterProvider(level).Meter("go.opentelemetry.io/collector/processor/processorhelper")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("go.opentelemetry.io/collector/processor/processorhelper")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                         metric.Meter
	ProcessorAcceptedLogRecords   metric.Int64Counter
	ProcessorAcceptedMetricPoints metric.Int64Counter
	ProcessorAcceptedSpans        metric.Int64Counter
	ProcessorDroppedLogRecords    metric.Int64Counter
	ProcessorDroppedMetricPoints  metric.Int64Counter
	ProcessorDroppedSpans         metric.Int64Counter
	ProcessorInsertedLogRecords   metric.Int64Counter
	ProcessorInsertedMetricPoints metric.Int64Counter
	ProcessorInsertedSpans        metric.Int64Counter
	ProcessorRefusedLogRecords    metric.Int64Counter
	ProcessorRefusedMetricPoints  metric.Int64Counter
	ProcessorRefusedSpans         metric.Int64Counter
	level                         configtelemetry.Level
}

// telemetryBuilderOption applies changes to default builder.
type telemetryBuilderOption func(*TelemetryBuilder)

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...telemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{level: configtelemetry.LevelBasic}
	for _, op := range options {
		op(&builder)
	}
	var err, errs error

	var meter metric.Meter
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorAcceptedLogRecords, err = meter.Int64Counter(
		"otelcol_processor_accepted_log_records",
		metric.WithDescription("Number of log records successfully pushed into the next component in the pipeline."),
		metric.WithUnit("{records}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorAcceptedMetricPoints, err = meter.Int64Counter(
		"otelcol_processor_accepted_metric_points",
		metric.WithDescription("Number of metric points successfully pushed into the next component in the pipeline."),
		metric.WithUnit("{datapoints}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorAcceptedSpans, err = meter.Int64Counter(
		"otelcol_processor_accepted_spans",
		metric.WithDescription("Number of spans successfully pushed into the next component in the pipeline."),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorDroppedLogRecords, err = meter.Int64Counter(
		"otelcol_processor_dropped_log_records",
		metric.WithDescription("Number of log records that were dropped."),
		metric.WithUnit("{records}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorDroppedMetricPoints, err = meter.Int64Counter(
		"otelcol_processor_dropped_metric_points",
		metric.WithDescription("Number of metric points that were dropped."),
		metric.WithUnit("{datapoints}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorDroppedSpans, err = meter.Int64Counter(
		"otelcol_processor_dropped_spans",
		metric.WithDescription("Number of spans that were dropped."),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorInsertedLogRecords, err = meter.Int64Counter(
		"otelcol_processor_inserted_log_records",
		metric.WithDescription("Number of log records that were inserted."),
		metric.WithUnit("{records}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorInsertedMetricPoints, err = meter.Int64Counter(
		"otelcol_processor_inserted_metric_points",
		metric.WithDescription("Number of metric points that were inserted."),
		metric.WithUnit("{datapoints}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorInsertedSpans, err = meter.Int64Counter(
		"otelcol_processor_inserted_spans",
		metric.WithDescription("Number of spans that were inserted."),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorRefusedLogRecords, err = meter.Int64Counter(
		"otelcol_processor_refused_log_records",
		metric.WithDescription("Number of log records that were rejected by the next component in the pipeline."),
		metric.WithUnit("{records}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorRefusedMetricPoints, err = meter.Int64Counter(
		"otelcol_processor_refused_metric_points",
		metric.WithDescription("Number of metric points that were rejected by the next component in the pipeline."),
		metric.WithUnit("{datapoints}"),
	)
	errs = errors.Join(errs, err)
	meter = LeveledMeter(settings, configtelemetry.LevelBasic)
	builder.ProcessorRefusedSpans, err = meter.Int64Counter(
		"otelcol_processor_refused_spans",
		metric.WithDescription("Number of spans that were rejected by the next component in the pipeline."),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}
